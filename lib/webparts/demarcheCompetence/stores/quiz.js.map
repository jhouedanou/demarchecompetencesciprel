{"version":3,"file":"quiz.js","sourceRoot":"","sources":["../../../../src/webparts/demarcheCompetence/stores/quiz.ts"],"names":[],"mappings":"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","sourcesContent":["import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport type {\n  QuizQuestion,\n  QuizResponse,\n  QuizResult\n} from '../types/index';\nimport { QuizService } from '@services/QuizService';\n\nexport const useQuizStore = defineStore('quiz', () => {\n  // State\n  const loading = ref(false);\n  const error = ref<string | null>(null);\n  \n  // Quiz Questions\n  const introductionQuestions = ref<QuizQuestion[]>([]);\n  const sondageQuestions = ref<QuizQuestion[]>([]);\n  \n  // Current Quiz State\n  const currentQuizType = ref<'Introduction' | 'Sondage' | null>(null);\n  const currentQuestionIndex = ref(0);\n  const quizStartTime = ref<Date | null>(null);\n  const quizInProgress = ref(false);\n  const currentResponses = ref<QuizResponse[]>([]);\n  \n  // Results\n  const userResults = ref<QuizResult[]>([]);\n  const quizStatistics = ref<{\n    totalParticipants: number;\n    averageScore: number;\n    completionRate: number;\n    averageCompletionTime: number;\n    categoryBreakdown: { [key: string]: number };\n  } | null>(null);\n\n  // Quiz service instance (will be injected)\n  let quizService: QuizService | null = null;\n\n  // Computed\n  const hasIntroductionQuestions = computed(() => introductionQuestions.value.length > 0);\n  const hasSondageQuestions = computed(() => sondageQuestions.value.length > 0);\n  \n  const currentQuestion = computed(() => {\n    if (currentQuizType.value === 'Introduction') {\n      return introductionQuestions.value[currentQuestionIndex.value];\n    } else if (currentQuizType.value === 'Sondage') {\n      return sondageQuestions.value[currentQuestionIndex.value];\n    }\n    return null;\n  });\n\n  const totalQuestions = computed(() => {\n    if (currentQuizType.value === 'Introduction') {\n      return introductionQuestions.value.length;\n    } else if (currentQuizType.value === 'Sondage') {\n      return sondageQuestions.value.length;\n    }\n    return 0;\n  });\n\n  const quizProgress = computed(() => {\n    if (totalQuestions.value === 0) return 0;\n    return Math.round(((currentQuestionIndex.value + 1) / totalQuestions.value) * 100);\n  });\n\n  const hasCompletedIntroduction = computed(() => \n    userResults.value.some(result => \n      result.quizType === 'Introduction' && result.status === 'Completed'\n    )\n  );\n\n  const hasCompletedSondage = computed(() => \n    userResults.value.some(result => \n      result.quizType === 'Sondage' && result.status === 'Completed'\n    )\n  );\n\n  const latestIntroductionResult = computed(() => \n    userResults.value\n      .filter(result => result.quizType === 'Introduction' && result.status === 'Completed')\n      .sort((a, b) => new Date(b.endTime).getTime() - new Date(a.endTime).getTime())[0] || null\n  );\n\n  const latestSondageResult = computed(() => \n    userResults.value\n      .filter(result => result.quizType === 'Sondage' && result.status === 'Completed')\n      .sort((a, b) => new Date(b.endTime).getTime() - new Date(a.endTime).getTime())[0] || null\n  );\n\n  // Actions\n  function setQuizService(service: QuizService) {\n    quizService = service;\n  }\n\n  async function loadIntroductionQuestions() {\n    if (!quizService) throw new Error('Quiz service not initialized');\n    \n    loading.value = true;\n    error.value = null;\n    \n    try {\n      introductionQuestions.value = await quizService.loadIntroductionQuestions();\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Erreur lors du chargement des questions';\n      throw err;\n    } finally {\n      loading.value = false;\n    }\n  }\n\n  async function loadSondageQuestions() {\n    if (!quizService) throw new Error('Quiz service not initialized');\n    \n    loading.value = true;\n    error.value = null;\n    \n    try {\n      sondageQuestions.value = await quizService.loadSondageQuestions();\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Erreur lors du chargement des questions du sondage';\n      throw err;\n    } finally {\n      loading.value = false;\n    }\n  }\n\n  async function loadUserResults(userId?: string) {\n    if (!quizService) throw new Error('Quiz service not initialized');\n    \n    loading.value = true;\n    error.value = null;\n    \n    try {\n      userResults.value = await quizService.loadUserResults(userId);\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Erreur lors du chargement des résultats';\n      throw err;\n    } finally {\n      loading.value = false;\n    }\n  }\n\n  async function startQuiz(quizType: 'Introduction' | 'Sondage') {\n    currentQuizType.value = quizType;\n    currentQuestionIndex.value = 0;\n    quizStartTime.value = new Date();\n    quizInProgress.value = true;\n    currentResponses.value = [];\n    error.value = null;\n\n    // Load questions if not already loaded\n    if (quizType === 'Introduction' && !hasIntroductionQuestions.value) {\n      await loadIntroductionQuestions();\n    } else if (quizType === 'Sondage' && !hasSondageQuestions.value) {\n      await loadSondageQuestions();\n    }\n\n    // Try to load saved progress\n    if (quizService) {\n      try {\n        const savedProgress = await quizService.loadProgress('current-user', quizType);\n        if (savedProgress) {\n          currentQuestionIndex.value = savedProgress.currentQuestion;\n          currentResponses.value = savedProgress.responses;\n          quizStartTime.value = savedProgress.startTime;\n        }\n      } catch (err) {\n        console.warn('Could not load saved progress:', err);\n      }\n    }\n  }\n\n  function nextQuestion() {\n    if (currentQuestionIndex.value < totalQuestions.value - 1) {\n      currentQuestionIndex.value++;\n    }\n  }\n\n  function previousQuestion() {\n    if (currentQuestionIndex.value > 0) {\n      currentQuestionIndex.value--;\n    }\n  }\n\n  function goToQuestion(index: number) {\n    if (index >= 0 && index < totalQuestions.value) {\n      currentQuestionIndex.value = index;\n    }\n  }\n\n  function addResponse(response: QuizResponse) {\n    const existingIndex = currentResponses.value.findIndex(r => r.questionId === response.questionId);\n    if (existingIndex >= 0) {\n      currentResponses.value[existingIndex] = response;\n    } else {\n      currentResponses.value.push(response);\n    }\n  }\n\n  function updateResponse(questionId: string, answer: string | number) {\n    const response = currentResponses.value.find(r => r.questionId === questionId);\n    if (response) {\n      response.answer = answer;\n    }\n  }\n\n  function getResponse(questionId: string): QuizResponse | undefined {\n    return currentResponses.value.find(r => r.questionId === questionId);\n  }\n\n  async function saveProgress(progressData: any) {\n    if (!quizService) return;\n    \n    try {\n      await quizService.saveProgress(progressData);\n    } catch (err) {\n      console.warn('Could not save progress:', err);\n    }\n  }\n\n  async function saveQuizResult(result: QuizResult) {\n    if (!quizService) throw new Error('Quiz service not initialized');\n    \n    loading.value = true;\n    error.value = null;\n    \n    try {\n      await quizService.saveQuizResult(result);\n      \n      // Add to local results\n      userResults.value.push(result);\n      \n      // Clear progress\n      await quizService.clearProgress(result.userId, result.quizType);\n      \n      // Reset quiz state\n      resetQuizState();\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Erreur lors de la sauvegarde du résultat';\n      throw err;\n    } finally {\n      loading.value = false;\n    }\n  }\n\n  function resetQuizState() {\n    currentQuizType.value = null;\n    currentQuestionIndex.value = 0;\n    quizStartTime.value = null;\n    quizInProgress.value = false;\n    currentResponses.value = [];\n  }\n\n  function abandonQuiz() {\n    if (quizService && currentQuizType.value && quizStartTime.value) {\n      // Save as abandoned result\n      const result: QuizResult = {\n        userId: 'current-user', // Will be replaced by actual user ID in service\n        userName: 'Current User',\n        quizType: currentQuizType.value,\n        responses: currentResponses.value,\n        totalQuestions: totalQuestions.value,\n        startTime: quizStartTime.value,\n        endTime: new Date(),\n        duration: Math.round((new Date().getTime() - quizStartTime.value.getTime()) / 1000),\n        status: 'Abandoned'\n      };\n\n      quizService.saveQuizResult(result).catch(err => {\n        console.warn('Could not save abandoned quiz:', err);\n      });\n    }\n\n    resetQuizState();\n  }\n\n  async function loadQuizStatistics(quizType?: string) {\n    if (!quizService) throw new Error('Quiz service not initialized');\n    \n    loading.value = true;\n    error.value = null;\n    \n    try {\n      quizStatistics.value = await quizService.getQuizStatistics(quizType);\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Erreur lors du chargement des statistiques';\n      throw err;\n    } finally {\n      loading.value = false;\n    }\n  }\n\n  async function exportQuizResults(quizType?: string, format: 'csv' | 'json' = 'csv') {\n    if (!quizService) throw new Error('Quiz service not initialized');\n    \n    loading.value = true;\n    error.value = null;\n    \n    try {\n      await quizService.exportResults(quizType, format);\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Erreur lors de l\\'export';\n      throw err;\n    } finally {\n      loading.value = false;\n    }\n  }\n\n  function validateCurrentResponses(): { isValid: boolean; errors: string[]; warnings: string[] } {\n    if (!quizService || !currentQuizType.value) {\n      return { isValid: false, errors: ['Quiz non initialisé'], warnings: [] };\n    }\n\n    const questions = currentQuizType.value === 'Introduction' \n      ? introductionQuestions.value \n      : sondageQuestions.value;\n\n    return quizService.validateResponses(questions, currentResponses.value);\n  }\n\n  function calculateCurrentScore(): {\n    score: number;\n    totalPossible: number;\n    correctAnswers: number;\n    percentage: number;\n  } {\n    if (!quizService || currentQuizType.value !== 'Introduction') {\n      return { score: 0, totalPossible: 0, correctAnswers: 0, percentage: 0 };\n    }\n\n    return quizService.calculateScore(introductionQuestions.value, currentResponses.value);\n  }\n\n  function getQuestionsByCategory(category: string): QuizQuestion[] {\n    return introductionQuestions.value.filter(q => q.category === category);\n  }\n\n  function getAverageTimePerQuestion(): number {\n    if (currentResponses.value.length === 0) return 0;\n    \n    const totalTime = currentResponses.value.reduce((sum, response) => sum + response.timeSpent, 0);\n    return Math.round(totalTime / currentResponses.value.length);\n  }\n\n  function getResponsesWithCorrectness(): Array<QuizResponse & { isCorrect?: boolean; question?: QuizQuestion }> {\n    return currentResponses.value.map(response => {\n      const question = currentQuizType.value === 'Introduction' \n        ? introductionQuestions.value.find(q => q.id === response.questionId)\n        : sondageQuestions.value.find(q => q.id === response.questionId);\n\n      return {\n        ...response,\n        isCorrect: question?.correctAnswer ? response.answer === question.correctAnswer : undefined,\n        question\n      };\n    });\n  }\n\n  // Clear all data\n  function clearAllData() {\n    introductionQuestions.value = [];\n    sondageQuestions.value = [];\n    userResults.value = [];\n    quizStatistics.value = null;\n    resetQuizState();\n    error.value = null;\n  }\n\n  // Error handling\n  function clearError() {\n    error.value = null;\n  }\n\n  function setError(message: string) {\n    error.value = message;\n  }\n\n  return {\n    // State\n    loading,\n    error,\n    introductionQuestions,\n    sondageQuestions,\n    currentQuizType,\n    currentQuestionIndex,\n    quizStartTime,\n    quizInProgress,\n    currentResponses,\n    userResults,\n    quizStatistics,\n\n    // Computed\n    hasIntroductionQuestions,\n    hasSondageQuestions,\n    currentQuestion,\n    totalQuestions,\n    quizProgress,\n    hasCompletedIntroduction,\n    hasCompletedSondage,\n    latestIntroductionResult,\n    latestSondageResult,\n\n    // Actions\n    setQuizService,\n    loadIntroductionQuestions,\n    loadSondageQuestions,\n    loadUserResults,\n    startQuiz,\n    nextQuestion,\n    previousQuestion,\n    goToQuestion,\n    addResponse,\n    updateResponse,\n    getResponse,\n    saveProgress,\n    saveQuizResult,\n    resetQuizState,\n    abandonQuiz,\n    loadQuizStatistics,\n    exportQuizResults,\n    validateCurrentResponses,\n    calculateCurrentScore,\n    getQuestionsByCategory,\n    getAverageTimePerQuestion,\n    getResponsesWithCorrectness,\n    clearAllData,\n    clearError,\n    setError\n  };\n});"]}