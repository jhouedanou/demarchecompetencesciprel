{"version":3,"file":"quiz.js","sourceRoot":"","sources":["../../../../src/webparts/demarcheCompetence/stores/quiz.ts"],"names":[],"mappings":"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","sourcesContent":["import { Module } from 'vuex';\nimport type {\n  QuizQuestion,\n  QuizResponse\n} from '../types/index';\nimport { QuizResult } from './types';\nimport { QuizService } from '@services/QuizService';\n\nexport interface QuizState {\n  loading: boolean;\n  error: string | null;\n  \n  // Quiz Questions\n  introductionQuestions: QuizQuestion[];\n  sondageQuestions: QuizQuestion[];\n  \n  // Current Quiz State\n  currentQuizType: 'Introduction' | 'Sondage' | null;\n  currentQuestionIndex: number;\n  quizStartTime: Date | null;\n  quizInProgress: boolean;\n  currentResponses: QuizResponse[];\n  \n  // Results\n  userResults: QuizResult[];\n  quizStatistics: {\n    totalParticipants: number;\n    averageScore: number;\n    completionRate: number;\n    averageTimeToComplete: number;\n  };\n  \n  // Quiz Settings\n  quizSettings: {\n    timeLimit: number; // in minutes, 0 = no limit\n    allowReview: boolean;\n    randomizeQuestions: boolean;\n    randomizeAnswers: boolean;\n    showResultsImmediately: boolean;\n    requireAllAnswers: boolean;\n  };\n  \n  // Auto-save\n  autoSaveEnabled: boolean;\n  lastAutoSave: Date | null;\n  \n  // Service\n  quizService: QuizService | null;\n}\n\n// Initial state\nconst initialState = (): QuizState => ({\n  loading: false,\n  error: null,\n  introductionQuestions: [],\n  sondageQuestions: [],\n  currentQuizType: null,\n  currentQuestionIndex: 0,\n  quizStartTime: null,\n  quizInProgress: false,\n  currentResponses: [],\n  userResults: [],\n  quizStatistics: {\n    totalParticipants: 0,\n    averageScore: 0,\n    completionRate: 0,\n    averageTimeToComplete: 0\n  },\n  quizSettings: {\n    timeLimit: 0,\n    allowReview: true,\n    randomizeQuestions: false,\n    randomizeAnswers: false,\n    showResultsImmediately: true,\n    requireAllAnswers: true\n  },\n  autoSaveEnabled: true,\n  lastAutoSave: null,\n  quizService: null\n});\n\n// Mutations\nconst mutations = {\n  SET_LOADING(state: QuizState, loading: boolean) {\n    state.loading = loading;\n  },\n\n  SET_ERROR(state: QuizState, error: string | null) {\n    state.error = error;\n  },\n\n  SET_INTRODUCTION_QUESTIONS(state: QuizState, questions: QuizQuestion[]) {\n    state.introductionQuestions = questions;\n  },\n\n  SET_SONDAGE_QUESTIONS(state: QuizState, questions: QuizQuestion[]) {\n    state.sondageQuestions = questions;\n  },\n\n  START_QUIZ(state: QuizState, quizType: 'Introduction' | 'Sondage') {\n    state.currentQuizType = quizType;\n    state.quizInProgress = true;\n    state.quizStartTime = new Date();\n    state.currentQuestionIndex = 0;\n    state.currentResponses = [];\n  },\n\n  END_QUIZ(state: QuizState) {\n    state.currentQuizType = null;\n    state.quizInProgress = false;\n    state.quizStartTime = null;\n    state.currentQuestionIndex = 0;\n    state.currentResponses = [];\n  },\n\n  SET_CURRENT_QUESTION_INDEX(state: QuizState, index: number) {\n    state.currentQuestionIndex = index;\n  },\n\n  ADD_RESPONSE(state: QuizState, response: QuizResponse) {\n    const existingIndex = state.currentResponses.findIndex(r => r.questionId === response.questionId);\n    if (existingIndex > -1) {\n      state.currentResponses.splice(existingIndex, 1, response);\n    } else {\n      state.currentResponses.push(response);\n    }\n  },\n\n  SET_USER_RESULTS(state: QuizState, results: QuizResult[]) {\n    state.userResults = results;\n  },\n\n  ADD_USER_RESULT(state: QuizState, result: QuizResult) {\n    state.userResults.push(result);\n  },\n\n  SET_QUIZ_STATISTICS(state: QuizState, statistics: QuizState['quizStatistics']) {\n    state.quizStatistics = statistics;\n  },\n\n  SET_QUIZ_SETTINGS(state: QuizState, settings: Partial<QuizState['quizSettings']>) {\n    state.quizSettings = { ...state.quizSettings, ...settings };\n  },\n\n  SET_AUTO_SAVE_ENABLED(state: QuizState, enabled: boolean) {\n    state.autoSaveEnabled = enabled;\n  },\n\n  UPDATE_LAST_AUTO_SAVE(state: QuizState) {\n    state.lastAutoSave = new Date();\n  },\n\n  SET_QUIZ_SERVICE(state: QuizState, service: QuizService) {\n    state.quizService = service;\n  },\n\n  CLEAR_ALL_DATA(state: QuizState) {\n    Object.assign(state, initialState());\n  }\n};\n\n// Actions\nconst actions = {\n  async loadIntroductionQuestions({ commit, state }: any) {\n    if (!state.quizService) {\n      throw new Error('Quiz service not initialized');\n    }\n\n    commit('SET_LOADING', true);\n    try {\n      const questions = await state.quizService.getIntroductionQuestions();\n      commit('SET_INTRODUCTION_QUESTIONS', questions);\n      commit('SET_ERROR', null);\n      return questions;\n    } catch (error) {\n      console.error('Error loading introduction questions:', error);\n      commit('SET_ERROR', error instanceof Error ? error.message : 'Erreur lors du chargement des questions');\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n\n  async loadSondageQuestions({ commit, state }: any) {\n    if (!state.quizService) {\n      throw new Error('Quiz service not initialized');\n    }\n\n    commit('SET_LOADING', true);\n    try {\n      const questions = await state.quizService.getSondageQuestions();\n      commit('SET_SONDAGE_QUESTIONS', questions);\n      commit('SET_ERROR', null);\n      return questions;\n    } catch (error) {\n      console.error('Error loading sondage questions:', error);\n      commit('SET_ERROR', error instanceof Error ? error.message : 'Erreur lors du chargement des questions');\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n\n  async loadUserResults({ commit, state }: any, userId?: string) {\n    if (!state.quizService) {\n      throw new Error('Quiz service not initialized');\n    }\n\n    try {\n      const results = await state.quizService.getUserResults(userId);\n      commit('SET_USER_RESULTS', results);\n      return results;\n    } catch (error) {\n      console.error('Error loading user results:', error);\n      throw error;\n    }\n  },\n\n  startQuiz({ commit, dispatch }: any, quizType: 'Introduction' | 'Sondage') {\n    commit('START_QUIZ', quizType);\n    \n    // Load questions if not already loaded\n    if (quizType === 'Introduction') {\n      dispatch('loadIntroductionQuestions');\n    } else {\n      dispatch('loadSondageQuestions');\n    }\n  },\n\n  endQuiz({ commit }: any) {\n    commit('END_QUIZ');\n  },\n\n  nextQuestion({ commit, state, getters }: any) {\n    if (getters.canGoNext) {\n      commit('SET_CURRENT_QUESTION_INDEX', state.currentQuestionIndex + 1);\n    }\n  },\n\n  previousQuestion({ commit, state, getters }: any) {\n    if (getters.canGoPrevious) {\n      commit('SET_CURRENT_QUESTION_INDEX', state.currentQuestionIndex - 1);\n    }\n  },\n\n  goToQuestion({ commit, getters }: any, index: number) {\n    if (index >= 0 && index < getters.totalQuestions) {\n      commit('SET_CURRENT_QUESTION_INDEX', index);\n    }\n  },\n\n  addResponse({ commit, dispatch }: any, response: QuizResponse) {\n    commit('ADD_RESPONSE', response);\n    \n    // Auto-save if enabled\n    dispatch('autoSave');\n  },\n\n  async submitQuiz({ commit, state, dispatch }: any) {\n    if (!state.quizService) {\n      throw new Error('Quiz service not initialized');\n    }\n\n    commit('SET_LOADING', true);\n    try {\n      const result = await state.quizService.submitQuizResponse({\n        quizType: state.currentQuizType!,\n        responses: state.currentResponses,\n        startTime: state.quizStartTime!,\n        endTime: new Date()\n      });\n\n      commit('ADD_USER_RESULT', result);\n      commit('END_QUIZ');\n      return result;\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n      commit('SET_ERROR', error instanceof Error ? error.message : 'Erreur lors de la soumission');\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n\n  async autoSave({ state, commit }: any) {\n    if (!state.autoSaveEnabled || !state.quizInProgress || !state.quizService) {\n      return;\n    }\n\n    try {\n      await state.quizService.saveQuizProgress({\n        quizType: state.currentQuizType!,\n        currentIndex: state.currentQuestionIndex,\n        responses: state.currentResponses,\n        startTime: state.quizStartTime!\n      });\n      commit('UPDATE_LAST_AUTO_SAVE');\n    } catch (error) {\n      console.error('Auto-save error:', error);\n      // Don't throw error for auto-save failures\n    }\n  },\n\n  setQuizService({ commit }: any, service: QuizService) {\n    commit('SET_QUIZ_SERVICE', service);\n  },\n\n  clearAllData({ commit }: any) {\n    commit('CLEAR_ALL_DATA');\n  }\n};\n\n// Getters\nconst getters = {\n  isLoading: (state: QuizState) => state.loading,\n  hasError: (state: QuizState) => state.error !== null,\n  \n  // Question getters\n  hasIntroductionQuestions: (state: QuizState) => state.introductionQuestions.length > 0,\n  hasSondageQuestions: (state: QuizState) => state.sondageQuestions.length > 0,\n  \n  currentQuestions: (state: QuizState) => {\n    return state.currentQuizType === 'Introduction' \n      ? state.introductionQuestions \n      : state.sondageQuestions;\n  },\n  \n  currentQuestion: (state: QuizState, getters: any) => {\n    const questions = getters.currentQuestions;\n    return questions[state.currentQuestionIndex] || null;\n  },\n  \n  totalQuestions: (state: QuizState, getters: any) => {\n    return getters.currentQuestions.length;\n  },\n  \n  // Navigation getters\n  canGoPrevious: (state: QuizState) => state.currentQuestionIndex > 0,\n  canGoNext: (state: QuizState, getters: any) => state.currentQuestionIndex < getters.totalQuestions - 1,\n  isLastQuestion: (state: QuizState, getters: any) => state.currentQuestionIndex === getters.totalQuestions - 1,\n  \n  // Progress getters\n  progressPercentage: (state: QuizState, getters: any) => {\n    if (getters.totalQuestions === 0) return 0;\n    return Math.round((state.currentQuestionIndex + 1) / getters.totalQuestions * 100);\n  },\n  \n  answeredQuestions: (state: QuizState) => {\n    return state.currentResponses.length;\n  },\n  \n  // Response getters\n  getResponseForQuestion: (state: QuizState) => (questionId: string) => {\n    return state.currentResponses.find(r => r.questionId === questionId);\n  },\n  \n  hasResponseForCurrentQuestion: (state: QuizState, getters: any) => {\n    const currentQuestion = getters.currentQuestion;\n    return currentQuestion ? state.currentResponses.some(r => r.questionId === currentQuestion.id) : false;\n  },\n  \n  // Results getters\n  latestResult: (state: QuizState) => {\n    if (state.userResults.length === 0) return null;\n    return state.userResults.reduce((latest, current) => \n      (current as any).completedAt > (latest as any).completedAt ? current : latest\n    );\n  },\n  \n  resultsByType: (state: QuizState) => (type: 'Introduction' | 'Sondage') => {\n    return state.userResults.filter(r => r.quizType === type);\n  },\n  \n  averageScore: (state: QuizState) => {\n    if (state.userResults.length === 0) return 0;\n    const totalScore = state.userResults.reduce((sum, result) => sum + (result as any).score, 0);\n    return Math.round(totalScore / state.userResults.length);\n  },\n  \n  // Time getters\n  timeElapsed: (state: QuizState) => {\n    if (!state.quizStartTime) return 0;\n    return Math.floor((Date.now() - state.quizStartTime.getTime()) / 1000);\n  },\n  \n  timeRemaining: (state: QuizState, getters: any) => {\n    if (state.quizSettings.timeLimit === 0) return null;\n    const timeLimit = state.quizSettings.timeLimit * 60; // Convert to seconds\n    return Math.max(0, timeLimit - getters.timeElapsed);\n  }\n};\n\nexport const quizModule: Module<QuizState, any> = {\n  namespaced: true,\n  state: initialState,\n  mutations,\n  actions,\n  getters\n};\n\n// QuizState interface is exported above"]}