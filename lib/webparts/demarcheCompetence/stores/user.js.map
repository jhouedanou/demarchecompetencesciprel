{"version":3,"file":"user.js","sourceRoot":"","sources":["../../../../src/webparts/demarcheCompetence/stores/user.ts"],"names":[],"mappings":"AAiCA,gBAAgB;AAChB,MAAM,YAAY,GAAG,GAAc,EAAE,CAAC,CAAC;IACrC,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,IAAI;IACX,WAAW,EAAE,IAAI;IACjB,eAAe,EAAE,KAAK;IACtB,YAAY,EAAE,KAAK;IACnB,YAAY,EAAE,EAAE;IAChB,eAAe,EAAE,EAAE;IACnB,cAAc,EAAE,IAAI;IACpB,eAAe,EAAE;QACf,kBAAkB,EAAE,IAAI;QACxB,YAAY,EAAE,KAAK;QACnB,eAAe,EAAE,IAAI;QACrB,mBAAmB,EAAE,UAAU;QAC/B,QAAQ,EAAE,IAAI;KACf;IACD,WAAW,EAAE,IAAI;CAClB,CAAC,CAAC;AAEH,YAAY;AACZ,MAAM,SAAS,GAAG;IAChB,WAAW,CAAC,KAAgB,EAAE,OAAgB;QAC5C,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,SAAS,CAAC,KAAgB,EAAE,KAAoB;QAC9C,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,gBAAgB,CAAC,KAAgB,EAAE,IAAiB;QAClD,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;QACzB,KAAK,CAAC,eAAe,GAAG,IAAI,KAAK,IAAI,CAAC;QACtC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED,iBAAiB,CAAC,KAAgB,EAAE,QAAwB;QAC1D,KAAK,CAAC,YAAY,GAAG,QAAQ,CAAC;IAChC,CAAC;IAED,iBAAiB,CAAC,KAAgB,EAAE,QAAsB;QACxD,MAAM,aAAa,GAAG,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,QAAQ,CAAC,YAAY,CAAC,CAAC;QAClG,IAAI,aAAa,GAAG,CAAC,CAAC,EAAE;YACtB,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;SACvD;aAAM;YACL,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnC;IACH,CAAC;IAED,oBAAoB,CAAC,KAAgB,EAAE,KAA2D;QAChG,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC;IAChC,CAAC;IAED,mBAAmB,CAAC,KAAgB,EAAE,UAAuC;QAC3E,KAAK,CAAC,cAAc,GAAG,UAAU,CAAC;IACpC,CAAC;IAED,oBAAoB,CAAC,KAAgB,EAAE,WAAkD;QACvF,KAAK,CAAC,eAAe,mCAAQ,KAAK,CAAC,eAAe,GAAK,WAAW,CAAE,CAAC;IACvE,CAAC;IAED,gBAAgB,CAAC,KAAgB,EAAE,OAAoB;QACrD,KAAK,CAAC,WAAW,GAAG,OAAO,CAAC;IAC9B,CAAC;IAED,cAAc,CAAC,KAAgB;QAC7B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;IACvC,CAAC;CACF,CAAC;AAEF,UAAU;AACV,MAAM,OAAO,GAAG;IACd,KAAK,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,KAAK,EAAO;QACzC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QAED,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAC5B,IAAI;YACF,oBAAoB;YACpB,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;YACtD,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;YAEjC,IAAI,IAAI,EAAE;gBACR,6BAA6B;gBAC7B,MAAM,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;oBACtD,KAAK,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;oBAC1C,KAAK,CAAC,WAAW,CAAC,kBAAkB,EAAE;oBACtC,KAAK,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;iBAC7C,CAAC,CAAC;gBAEH,MAAM,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;gBACtC,MAAM,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;gBACtC,MAAM,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;aAC3C;YAED,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SAC3B;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,8CAA8C,CAAC,CAAC;YAC7G,MAAM,KAAK,CAAC;SACb;gBAAS;YACR,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;SAC9B;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,KAAK,EAAO;QAC1C,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;SACpE;QAED,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAC5B,IAAI;YACF,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC/C,KAAK,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC;gBACvD,KAAK,CAAC,WAAW,CAAC,iBAAiB,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC;aAC1D,CAAC,CAAC;YAEH,MAAM,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;YACtC,MAAM,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SAC3B;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,6CAA6C,CAAC,CAAC;YAC5G,MAAM,KAAK,CAAC;SACb;gBAAS;YACR,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;SAC9B;IACH,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAO,EAAE,QAAsB;QACrE,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QAED,IAAI;YACF,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACzE,MAAM,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;YAC3C,OAAO,aAAa,CAAC;SACtB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAO,EAAE,WAAkD;QACpG,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;SACpE;QAED,IAAI;YACF,MAAM,KAAK,CAAC,WAAW,CAAC,qBAAqB,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YACjF,MAAM,CAAC,sBAAsB,EAAE,WAAW,CAAC,CAAC;SAC7C;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED,cAAc,CAAC,EAAE,MAAM,EAAO,EAAE,OAAoB;QAClD,MAAM,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IAED,YAAY,CAAC,EAAE,MAAM,EAAO;QAC1B,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAC3B,CAAC;CACF,CAAC;AAEF,UAAU;AACV,MAAM,OAAO,GAAG;IACd,SAAS,EAAE,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO;IAC9C,QAAQ,EAAE,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,IAAI;IACpD,eAAe,EAAE,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,eAAe;IAC5D,YAAY,EAAE,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,YAAY;IACtD,WAAW,EAAE,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW;IACpD,eAAe,EAAE,CAAC,KAAgB,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,KAAK,CAAC,WAAW,0CAAE,WAAW,KAAI,aAAa,CAAA,EAAA;IACtF,SAAS,EAAE,CAAC,KAAgB,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,KAAK,CAAC,WAAW,0CAAE,KAAK,KAAI,EAAE,CAAA,EAAA;IAE/D,mBAAmB;IACnB,eAAe,EAAE,CAAC,KAAgB,EAAE,EAAE;QACpC,IAAI,KAAK,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAC9C,MAAM,aAAa,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;QAC3F,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC/D,CAAC;IAED,kBAAkB,EAAE,CAAC,KAAgB,EAAE,EAAE,CAAC,CAAC,YAAoB,EAAE,EAAE;QACjE,OAAO,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,YAAY,CAAC,CAAC;IACvE,CAAC;IAED,oBAAoB,EAAE,CAAC,KAAgB,EAAE,EAAE;QACzC,OAAO,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,kBAAkB,IAAI,GAAG,CAAC,CAAC;IACrE,CAAC;IAED,qBAAqB,EAAE,CAAC,KAAgB,EAAE,EAAE;QAC1C,OAAO,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,kBAAkB,GAAG,CAAC,IAAI,CAAC,CAAC,kBAAkB,GAAG,GAAG,CAAC,CAAC;IAChG,CAAC;IAED,qBAAqB;IACrB,iBAAiB,EAAE,CAAC,KAAgB,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,KAAK,CAAC,cAAc,0CAAE,iBAAiB,KAAI,CAAC,CAAA,EAAA;IACrF,YAAY,EAAE,CAAC,KAAgB,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,KAAK,CAAC,cAAc,0CAAE,gBAAgB,KAAI,CAAC,CAAA,EAAA;IAC/E,iBAAiB,EAAE,CAAC,KAAgB,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,KAAK,CAAC,cAAc,0CAAE,iBAAiB,KAAI,CAAC,CAAA,EAAA;IACrF,gBAAgB,EAAE,CAAC,KAAgB,EAAE,EAAE,WAAC,OAAA,MAAA,KAAK,CAAC,cAAc,0CAAE,gBAAgB,CAAA,EAAA;IAE9E,qBAAqB;IACrB,eAAe,EAAE,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,eAAe;IAC5D,4BAA4B,EAAE,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,eAAe,CAAC,kBAAkB;IAC5F,iBAAiB,EAAE,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ;CACxE,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAA2B;IAChD,UAAU,EAAE,IAAI;IAChB,KAAK,EAAE,YAAY;IACnB,SAAS;IACT,OAAO;IACP,OAAO;CACR,CAAC;AAEF,wCAAwC","sourcesContent":["import { Module } from 'vuex';\nimport type {\n  CompetenceArea\n} from '../types/index';\nimport { UserService } from '@services/UserService';\nimport { User, UserProgress } from './types';\n\nexport interface UserState {\n  loading: boolean;\n  error: string | null;\n  currentUser: User | null;\n  isAuthenticated: boolean;\n  isUserLoaded: boolean;\n  userProgress: UserProgress[];\n  competenceAreas: (CompetenceArea & { userProgress?: UserProgress })[];\n  userStatistics: {\n    totalQuizzesTaken: number;\n    averageQuizScore: number;\n    timeSpentLearning: number;\n    competencesInProgress: number;\n    competencesCompleted: number;\n    lastActivityDate: Date | null;\n  } | null;\n  userPreferences: {\n    emailNotifications: boolean;\n    weeklyDigest: boolean;\n    reminderEnabled: boolean;\n    preferredDifficulty: 'beginner' | 'intermediate' | 'advanced';\n    autoSave: boolean;\n  };\n  userService: UserService | null;\n}\n\n// Initial state\nconst initialState = (): UserState => ({\n  loading: false,\n  error: null,\n  currentUser: null,\n  isAuthenticated: false,\n  isUserLoaded: false,\n  userProgress: [],\n  competenceAreas: [],\n  userStatistics: null,\n  userPreferences: {\n    emailNotifications: true,\n    weeklyDigest: false,\n    reminderEnabled: true,\n    preferredDifficulty: 'beginner',\n    autoSave: true\n  },\n  userService: null\n});\n\n// Mutations\nconst mutations = {\n  SET_LOADING(state: UserState, loading: boolean) {\n    state.loading = loading;\n  },\n\n  SET_ERROR(state: UserState, error: string | null) {\n    state.error = error;\n  },\n\n  SET_CURRENT_USER(state: UserState, user: User | null) {\n    state.currentUser = user;\n    state.isAuthenticated = user !== null;\n    state.isUserLoaded = true;\n  },\n\n  SET_USER_PROGRESS(state: UserState, progress: UserProgress[]) {\n    state.userProgress = progress;\n  },\n\n  ADD_USER_PROGRESS(state: UserState, progress: UserProgress) {\n    const existingIndex = state.userProgress.findIndex(p => p.competenceId === progress.competenceId);\n    if (existingIndex > -1) {\n      state.userProgress.splice(existingIndex, 1, progress);\n    } else {\n      state.userProgress.push(progress);\n    }\n  },\n\n  SET_COMPETENCE_AREAS(state: UserState, areas: (CompetenceArea & { userProgress?: UserProgress })[]) {\n    state.competenceAreas = areas;\n  },\n\n  SET_USER_STATISTICS(state: UserState, statistics: UserState['userStatistics']) {\n    state.userStatistics = statistics;\n  },\n\n  SET_USER_PREFERENCES(state: UserState, preferences: Partial<UserState['userPreferences']>) {\n    state.userPreferences = { ...state.userPreferences, ...preferences };\n  },\n\n  SET_USER_SERVICE(state: UserState, service: UserService) {\n    state.userService = service;\n  },\n\n  CLEAR_ALL_DATA(state: UserState) {\n    Object.assign(state, initialState());\n  }\n};\n\n// Actions\nconst actions = {\n  async initializeUser({ commit, state }: any) {\n    if (!state.userService) {\n      throw new Error('User service not initialized');\n    }\n\n    commit('SET_LOADING', true);\n    try {\n      // Load current user\n      const user = await state.userService.getCurrentUser();\n      commit('SET_CURRENT_USER', user);\n\n      if (user) {\n        // Load user data in parallel\n        const [progress, areas, statistics] = await Promise.all([\n          state.userService.getUserProgress(user.id),\n          state.userService.getCompetenceAreas(),\n          state.userService.getUserStatistics(user.id)\n        ]);\n\n        commit('SET_USER_PROGRESS', progress);\n        commit('SET_COMPETENCE_AREAS', areas);\n        commit('SET_USER_STATISTICS', statistics);\n      }\n\n      commit('SET_ERROR', null);\n    } catch (error) {\n      console.error('User initialization error:', error);\n      commit('SET_ERROR', error instanceof Error ? error.message : 'Erreur lors de l\\'initialisation utilisateur');\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n\n  async refreshUserData({ commit, state }: any) {\n    if (!state.userService || !state.currentUser) {\n      throw new Error('User service not initialized or user not loaded');\n    }\n\n    commit('SET_LOADING', true);\n    try {\n      const [progress, statistics] = await Promise.all([\n        state.userService.getUserProgress(state.currentUser.id),\n        state.userService.getUserStatistics(state.currentUser.id)\n      ]);\n\n      commit('SET_USER_PROGRESS', progress);\n      commit('SET_USER_STATISTICS', statistics);\n      commit('SET_ERROR', null);\n    } catch (error) {\n      console.error('User data refresh error:', error);\n      commit('SET_ERROR', error instanceof Error ? error.message : 'Erreur lors de l\\'actualisation des données');\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n\n  async updateUserProgress({ commit, state }: any, progress: UserProgress) {\n    if (!state.userService) {\n      throw new Error('User service not initialized');\n    }\n\n    try {\n      const savedProgress = await state.userService.saveUserProgress(progress);\n      commit('ADD_USER_PROGRESS', savedProgress);\n      return savedProgress;\n    } catch (error) {\n      console.error('Error updating user progress:', error);\n      throw error;\n    }\n  },\n\n  async updateUserPreferences({ commit, state }: any, preferences: Partial<UserState['userPreferences']>) {\n    if (!state.userService || !state.currentUser) {\n      throw new Error('User service not initialized or user not loaded');\n    }\n\n    try {\n      await state.userService.updateUserPreferences(state.currentUser.id, preferences);\n      commit('SET_USER_PREFERENCES', preferences);\n    } catch (error) {\n      console.error('Error updating user preferences:', error);\n      throw error;\n    }\n  },\n\n  setUserService({ commit }: any, service: UserService) {\n    commit('SET_USER_SERVICE', service);\n  },\n\n  clearAllData({ commit }: any) {\n    commit('CLEAR_ALL_DATA');\n  }\n};\n\n// Getters\nconst getters = {\n  isLoading: (state: UserState) => state.loading,\n  hasError: (state: UserState) => state.error !== null,\n  isAuthenticated: (state: UserState) => state.isAuthenticated,\n  isUserLoaded: (state: UserState) => state.isUserLoaded,\n  currentUser: (state: UserState) => state.currentUser,\n  userDisplayName: (state: UserState) => state.currentUser?.displayName || 'Utilisateur',\n  userEmail: (state: UserState) => state.currentUser?.email || '',\n  \n  // Progress getters\n  overallProgress: (state: UserState) => {\n    if (state.userProgress.length === 0) return 0;\n    const totalProgress = state.userProgress.reduce((sum, p) => sum + p.progressPercentage, 0);\n    return Math.round(totalProgress / state.userProgress.length);\n  },\n\n  competenceProgress: (state: UserState) => (competenceId: string) => {\n    return state.userProgress.find(p => p.competenceId === competenceId);\n  },\n\n  completedCompetences: (state: UserState) => {\n    return state.userProgress.filter(p => p.progressPercentage >= 100);\n  },\n\n  inProgressCompetences: (state: UserState) => {\n    return state.userProgress.filter(p => p.progressPercentage > 0 && p.progressPercentage < 100);\n  },\n\n  // Statistics getters\n  totalQuizzesTaken: (state: UserState) => state.userStatistics?.totalQuizzesTaken || 0,\n  averageScore: (state: UserState) => state.userStatistics?.averageQuizScore || 0,\n  timeSpentLearning: (state: UserState) => state.userStatistics?.timeSpentLearning || 0,\n  lastActivityDate: (state: UserState) => state.userStatistics?.lastActivityDate,\n\n  // Preference getters\n  userPreferences: (state: UserState) => state.userPreferences,\n  hasEmailNotificationsEnabled: (state: UserState) => state.userPreferences.emailNotifications,\n  isAutoSaveEnabled: (state: UserState) => state.userPreferences.autoSave\n};\n\nexport const userModule: Module<UserState, any> = {\n  namespaced: true,\n  state: initialState,\n  mutations,\n  actions,\n  getters\n};\n\n// UserState interface is exported above"]}