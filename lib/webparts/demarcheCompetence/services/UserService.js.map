{"version":3,"file":"UserService.js","sourceRoot":"","sources":["../../../../src/webparts/demarcheCompetence/services/UserService.ts"],"names":[],"mappings":"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","sourcesContent":["import { SharePointService } from './SharePointService';\nimport type {\n  UserProgress,\n  UserProgressItem,\n  CompetenceArea,\n  CompetenceLevel\n} from '../types/index';\n\nexport interface User {\n  id: number;\n  title: string;\n  email: string;\n  loginName: string;\n}\n\nexport class UserService {\n  private sharePointService: SharePointService;\n  private currentUser: User | null = null;\n\n  constructor(sharePointService: SharePointService) {\n    this.sharePointService = sharePointService;\n  }\n\n  /**\n   * Get current user information\n   */\n  public async getCurrentUser(): Promise<User> {\n    try {\n      if (!this.currentUser) {\n        this.currentUser = await this.sharePointService.getCurrentUser();\n      }\n      return this.currentUser;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      throw new Error('Impossible de récupérer les informations de l\\'utilisateur actuel');\n    }\n  }\n\n  /**\n   * Load user progress data\n   */\n  public async loadUserProgress(userId?: string): Promise<UserProgress[]> {\n    try {\n      const targetUserId = userId || (await this.getCurrentUser()).email;\n      const items = await this.sharePointService.getUserProgress(targetUserId);\n      return items.map(item => this.transformProgressItem(item));\n    } catch (error) {\n      console.error('Error loading user progress:', error);\n      throw new Error('Impossible de charger les progrès de l\\'utilisateur');\n    }\n  }\n\n  /**\n   * Save or update user progress\n   */\n  public async saveUserProgress(progress: UserProgress): Promise<void> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      \n      // Check if progress already exists for this competence area\n      const existingProgress = await this.sharePointService.getUserProgress(currentUser.email);\n      const existing = existingProgress.find(p => p.CompetenceArea === progress.competenceArea);\n\n      if (existing) {\n        // Update existing progress\n        await this.sharePointService.updateUserProgress(existing.Id, {\n          CurrentLevel: progress.currentLevel,\n          TargetLevel: progress.targetLevel,\n          LastAssessment: progress.lastAssessment.toISOString(),\n          NextAssessment: progress.nextAssessment.toISOString(),\n          Progress: progress.progress\n        });\n      } else {\n        // Create new progress entry\n        const newProgress: Partial<UserProgressItem> = {\n          CompetenceArea: progress.competenceArea,\n          CurrentLevel: progress.currentLevel,\n          TargetLevel: progress.targetLevel,\n          LastAssessment: progress.lastAssessment.toISOString(),\n          NextAssessment: progress.nextAssessment.toISOString(),\n          Progress: progress.progress\n        };\n\n        await this.sharePointService.saveUserProgress(newProgress);\n      }\n    } catch (error) {\n      console.error('Error saving user progress:', error);\n      throw new Error('Impossible de sauvegarder les progrès de l\\'utilisateur');\n    }\n  }\n\n  /**\n   * Update competence level\n   */\n  public async updateCompetenceLevel(\n    competenceArea: string,\n    newLevel: number,\n    assessmentDate?: Date\n  ): Promise<void> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      const userProgress = await this.sharePointService.getUserProgress(currentUser.email);\n      const existing = userProgress.find(p => p.CompetenceArea === competenceArea);\n\n      const updateData = {\n        CurrentLevel: newLevel,\n        LastAssessment: (assessmentDate || new Date()).toISOString(),\n        Progress: this.calculateProgress(newLevel, existing?.TargetLevel || 5)\n      };\n\n      if (existing) {\n        await this.sharePointService.updateUserProgress(existing.Id, updateData);\n      } else {\n        const newProgress: Partial<UserProgressItem> = {\n          CompetenceArea: competenceArea,\n          ...updateData,\n          TargetLevel: 5, // Default target level\n          NextAssessment: this.calculateNextAssessment(assessmentDate || new Date()).toISOString()\n        };\n\n        await this.sharePointService.saveUserProgress(newProgress);\n      }\n    } catch (error) {\n      console.error('Error updating competence level:', error);\n      throw new Error('Impossible de mettre à jour le niveau de compétence');\n    }\n  }\n\n  /**\n   * Set competence targets\n   */\n  public async setCompetenceTargets(targets: { [competenceArea: string]: number }): Promise<void> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      const userProgress = await this.sharePointService.getUserProgress(currentUser.email);\n\n      const updates: Array<{ id: number; data: Partial<UserProgressItem> }> = [];\n      const newEntries: Array<Partial<UserProgressItem>> = [];\n\n      for (const [competenceArea, targetLevel] of Object.entries(targets)) {\n        const existing = userProgress.find(p => p.CompetenceArea === competenceArea);\n\n        if (existing) {\n          updates.push({\n            id: existing.Id,\n            data: {\n              TargetLevel: targetLevel,\n              Progress: this.calculateProgress(existing.CurrentLevel, targetLevel)\n            }\n          });\n        } else {\n          newEntries.push({\n            CompetenceArea: competenceArea,\n            CurrentLevel: 0,\n            TargetLevel: targetLevel,\n            LastAssessment: new Date().toISOString(),\n            NextAssessment: this.calculateNextAssessment(new Date()).toISOString(),\n            Progress: 0\n          });\n        }\n      }\n\n      // Execute bulk updates\n      if (updates.length > 0) {\n        await this.sharePointService.bulkUpdateItems('User_Progress', updates);\n      }\n\n      // Create new entries\n      for (const entry of newEntries) {\n        await this.sharePointService.saveUserProgress(entry);\n      }\n    } catch (error) {\n      console.error('Error setting competence targets:', error);\n      throw new Error('Impossible de définir les objectifs de compétence');\n    }\n  }\n\n  /**\n   * Get competence areas with user progress\n   */\n  public async getCompetenceAreasWithProgress(): Promise<(CompetenceArea & { userProgress?: UserProgress })[]> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      const userProgress = await this.loadUserProgress(currentUser.email);\n      \n      const competenceAreas = this.getDefaultCompetenceAreas();\n      \n      return competenceAreas.map(area => {\n        const progress = userProgress.find(p => p.competenceArea === area.name);\n        return {\n          ...area,\n          userProgress: progress\n        };\n      });\n    } catch (error) {\n      console.error('Error getting competence areas with progress:', error);\n      throw new Error('Impossible de charger les domaines de compétence');\n    }\n  }\n\n  /**\n   * Calculate overall user progress\n   */\n  public async calculateOverallProgress(): Promise<{\n    overallPercentage: number;\n    competenceBreakdown: { [area: string]: number };\n    totalAssessments: number;\n    nextAssessmentDue: Date | null;\n  }> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      const userProgress = await this.loadUserProgress(currentUser.email);\n\n      const competenceBreakdown: { [area: string]: number } = {};\n      let totalProgress = 0;\n      let nextAssessmentDue: Date | null = null;\n\n      for (const progress of userProgress) {\n        const percentage = this.calculateProgress(progress.currentLevel, progress.targetLevel);\n        competenceBreakdown[progress.competenceArea] = percentage;\n        totalProgress += percentage;\n\n        // Find earliest next assessment date\n        if (!nextAssessmentDue || progress.nextAssessment < nextAssessmentDue) {\n          nextAssessmentDue = progress.nextAssessment;\n        }\n      }\n\n      return {\n        overallPercentage: userProgress.length > 0 ? Math.round(totalProgress / userProgress.length) : 0,\n        competenceBreakdown,\n        totalAssessments: userProgress.length,\n        nextAssessmentDue\n      };\n    } catch (error) {\n      console.error('Error calculating overall progress:', error);\n      throw new Error('Impossible de calculer les progrès globaux');\n    }\n  }\n\n  /**\n   * Get user statistics\n   */\n  public async getUserStatistics(): Promise<{\n    totalQuizzesTaken: number;\n    averageQuizScore: number;\n    timeSpentLearning: number;\n    competencesInProgress: number;\n    competencesCompleted: number;\n    lastActivityDate: Date | null;\n  }> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      \n      // Get quiz results\n      const quizResults = await this.sharePointService.getQuizResults(currentUser.email);\n      \n      // Get user progress\n      const userProgress = await this.loadUserProgress(currentUser.email);\n\n      // Calculate statistics\n      const completedQuizzes = quizResults.filter(r => r.Status === 'Completed');\n      const averageScore = completedQuizzes.length > 0 ? \n        completedQuizzes.reduce((sum, r) => sum + (r.Score || 0), 0) / completedQuizzes.length : 0;\n      \n      const totalTime = quizResults.reduce((sum, r) => sum + (r.Duration || 0), 0);\n      \n      const competencesInProgress = userProgress.filter(p => p.progress > 0 && p.progress < 100).length;\n      const competencesCompleted = userProgress.filter(p => p.progress >= 100).length;\n\n      const lastActivity = quizResults.length > 0 ? \n        new Date(Math.max(...quizResults.map(r => new Date(r.CompletionDate || r.Created).getTime()))) : null;\n\n      return {\n        totalQuizzesTaken: completedQuizzes.length,\n        averageQuizScore: Math.round(averageScore),\n        timeSpentLearning: totalTime,\n        competencesInProgress,\n        competencesCompleted,\n        lastActivityDate: lastActivity\n      };\n    } catch (error) {\n      console.error('Error getting user statistics:', error);\n      throw new Error('Impossible de charger les statistiques de l\\'utilisateur');\n    }\n  }\n\n  /**\n   * Schedule next assessment\n   */\n  public async scheduleNextAssessment(competenceArea: string, assessmentDate: Date): Promise<void> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      const userProgress = await this.sharePointService.getUserProgress(currentUser.email);\n      const existing = userProgress.find(p => p.CompetenceArea === competenceArea);\n\n      if (existing) {\n        await this.sharePointService.updateUserProgress(existing.Id, {\n          NextAssessment: assessmentDate.toISOString()\n        });\n      } else {\n        throw new Error(`Aucun progrès trouvé pour le domaine de compétence: ${competenceArea}`);\n      }\n    } catch (error) {\n      console.error('Error scheduling next assessment:', error);\n      throw new Error('Impossible de programmer la prochaine évaluation');\n    }\n  }\n\n  /**\n   * Get upcoming assessments\n   */\n  public async getUpcomingAssessments(daysAhead: number = 30): Promise<{\n    competenceArea: string;\n    assessmentDate: Date;\n    currentLevel: number;\n    targetLevel: number;\n    daysUntilDue: number;\n  }[]> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      const userProgress = await this.loadUserProgress(currentUser.email);\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() + daysAhead);\n\n      return userProgress\n        .filter(p => p.nextAssessment <= cutoffDate)\n        .map(p => ({\n          competenceArea: p.competenceArea,\n          assessmentDate: p.nextAssessment,\n          currentLevel: p.currentLevel,\n          targetLevel: p.targetLevel,\n          daysUntilDue: Math.ceil((p.nextAssessment.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))\n        }))\n        .sort((a, b) => a.assessmentDate.getTime() - b.assessmentDate.getTime());\n    } catch (error) {\n      console.error('Error getting upcoming assessments:', error);\n      throw new Error('Impossible de charger les évaluations à venir');\n    }\n  }\n\n  /**\n   * Export user data\n   */\n  public async exportUserData(format: 'json' | 'csv' = 'json'): Promise<void> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      const [userProgress, quizResults, statistics] = await Promise.all([\n        this.loadUserProgress(currentUser.email),\n        this.sharePointService.getQuizResults(currentUser.email),\n        this.getUserStatistics()\n      ]);\n\n      const exportData = {\n        user: currentUser,\n        exportDate: new Date().toISOString(),\n        progress: userProgress,\n        quizResults,\n        statistics\n      };\n\n      if (format === 'json') {\n        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `user-data-${currentUser.email}-${new Date().toISOString().split('T')[0]}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n      } else {\n        // CSV export for progress data\n        const headers = ['Domaine de Compétence', 'Niveau Actuel', 'Niveau Cible', 'Progrès (%)', 'Dernière Évaluation', 'Prochaine Évaluation'];\n        const rows = userProgress.map(p => [\n          p.competenceArea,\n          p.currentLevel,\n          p.targetLevel,\n          p.progress,\n          p.lastAssessment.toLocaleDateString('fr-FR'),\n          p.nextAssessment.toLocaleDateString('fr-FR')\n        ]);\n\n        const csvContent = [headers, ...rows]\n          .map(row => row.map(cell => `\"${cell}\"`).join(','))\n          .join('\\n');\n\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `user-progress-${currentUser.email}-${new Date().toISOString().split('T')[0]}.csv`;\n        a.click();\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Error exporting user data:', error);\n      throw new Error('Impossible d\\'exporter les données de l\\'utilisateur');\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private transformProgressItem(item: UserProgressItem): UserProgress {\n    return {\n      id: item.Id.toString(),\n      userId: item.User.Email,\n      userName: item.User.Title,\n      competenceArea: item.CompetenceArea,\n      currentLevel: item.CurrentLevel,\n      targetLevel: item.TargetLevel,\n      lastAssessment: new Date(item.LastAssessment),\n      nextAssessment: new Date(item.NextAssessment),\n      progress: item.Progress\n    };\n  }\n\n  private calculateProgress(currentLevel: number, targetLevel: number): number {\n    if (targetLevel === 0) return 0;\n    return Math.min(Math.round((currentLevel / targetLevel) * 100), 100);\n  }\n\n  private calculateNextAssessment(lastAssessment: Date): Date {\n    const nextAssessment = new Date(lastAssessment);\n    nextAssessment.setMonth(nextAssessment.getMonth() + 6); // 6 months from last assessment\n    return nextAssessment;\n  }\n\n  private getDefaultCompetenceAreas(): CompetenceArea[] {\n    return [\n      {\n        id: 'leadership',\n        name: 'Leadership',\n        description: 'Capacité à diriger et inspirer les équipes',\n        levels: this.getDefaultLevels()\n      },\n      {\n        id: 'communication',\n        name: 'Communication',\n        description: 'Aptitudes à communiquer efficacement',\n        levels: this.getDefaultLevels()\n      },\n      {\n        id: 'technique',\n        name: 'Technique',\n        description: 'Compétences techniques spécialisées',\n        levels: this.getDefaultLevels()\n      },\n      {\n        id: 'management',\n        name: 'Management',\n        description: 'Gestion d\\'équipes et de projets',\n        levels: this.getDefaultLevels()\n      },\n      {\n        id: 'innovation',\n        name: 'Innovation',\n        description: 'Créativité et innovation',\n        levels: this.getDefaultLevels()\n      },\n      {\n        id: 'qualite',\n        name: 'Qualité',\n        description: 'Assurance qualité et amélioration continue',\n        levels: this.getDefaultLevels()\n      }\n    ];\n  }\n\n  private getDefaultLevels(): CompetenceLevel[] {\n    return [\n      {\n        level: 1,\n        title: 'Débutant',\n        description: 'Connaissances de base',\n        requirements: ['Compréhension théorique', 'Supervision nécessaire']\n      },\n      {\n        level: 2,\n        title: 'Intermédiaire',\n        description: 'Compétences pratiques développées',\n        requirements: ['Application pratique', 'Supervision occasionnelle']\n      },\n      {\n        level: 3,\n        title: 'Confirmé',\n        description: 'Maîtrise opérationnelle',\n        requirements: ['Autonomie complète', 'Résolution de problèmes']\n      },\n      {\n        level: 4,\n        title: 'Expert',\n        description: 'Expertise reconnue',\n        requirements: ['Innovation', 'Formation d\\'autres', 'Amélioration continue']\n      },\n      {\n        level: 5,\n        title: 'Maître',\n        description: 'Leadership et vision stratégique',\n        requirements: ['Vision stratégique', 'Transformation organisationnelle', 'Mentoring']\n      }\n    ];\n  }\n}"]}