{"version":3,"file":"QuizService.js","sourceRoot":"","sources":["../../../../src/webparts/demarcheCompetence/services/QuizService.ts"],"names":[],"mappings":"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","sourcesContent":["import { SharePointService } from './SharePointService';\nimport type {\n  QuizQuestion,\n  QuizResponse,\n  QuizResult,\n  QuizIntroductionItem,\n  QuizSondageItem,\n  QuizResultsItem\n} from '@types/index';\n\nexport class QuizService {\n  private sharePointService: SharePointService;\n\n  constructor(sharePointService: SharePointService) {\n    this.sharePointService = sharePointService;\n  }\n\n  /**\n   * Load and transform introduction quiz questions\n   */\n  public async loadIntroductionQuestions(): Promise<QuizQuestion[]> {\n    try {\n      const items = await this.sharePointService.getQuizIntroductionQuestions();\n      return items.map(item => this.transformIntroductionItem(item));\n    } catch (error) {\n      console.error('Error loading introduction questions:', error);\n      throw new Error('Impossible de charger les questions du quiz d\\'introduction');\n    }\n  }\n\n  /**\n   * Load and transform survey questions\n   */\n  public async loadSurveyQuestions(): Promise<QuizQuestion[]> {\n    try {\n      const items = await this.sharePointService.getQuizSondageQuestions();\n      return items.map(item => this.transformSurveyItem(item));\n    } catch (error) {\n      console.error('Error loading survey questions:', error);\n      throw new Error('Impossible de charger les questions du sondage');\n    }\n  }\n\n  /**\n   * Alias FR: Charger les questions du sondage (compatibilité avec le store)\n   */\n  public async loadSondageQuestions(): Promise<QuizQuestion[]> {\n    return this.loadSurveyQuestions();\n  }\n\n  /**\n   * Save quiz result\n   */\n  public async saveQuizResult(result: QuizResult): Promise<void> {\n    try {\n      const sharePointResult: Partial<QuizResultsItem> = {\n        QuizType: result.quizType,\n        Responses: JSON.stringify(result.responses),\n        Score: result.score,\n        CompletionDate: result.endTime.toISOString(),\n        Duration: result.duration,\n        Status: result.status\n      };\n\n      await this.sharePointService.saveQuizResult(sharePointResult);\n    } catch (error) {\n      console.error('Error saving quiz result:', error);\n      throw new Error('Impossible de sauvegarder le résultat du quiz');\n    }\n  }\n\n  /**\n   * Load user's quiz results\n   */\n  public async loadUserResults(userId?: string): Promise<QuizResult[]> {\n    try {\n      const items = await this.sharePointService.getQuizResults(userId);\n      return items.map(item => this.transformResultItem(item));\n    } catch (error) {\n      console.error('Error loading user results:', error);\n      throw new Error('Impossible de charger les résultats de l\\'utilisateur');\n    }\n  }\n\n  /**\n   * Save quiz progress (for auto-save functionality)\n   */\n  public async saveProgress(progressData: {\n    userId: string;\n    quizType: string;\n    responses: QuizResponse[];\n    currentQuestion: number;\n    startTime: Date;\n    status: string;\n  }): Promise<void> {\n    try {\n      // Use local storage for progress saving as it's temporary data\n      const progressKey = `quiz_progress_${progressData.userId}_${progressData.quizType}`;\n      const progressInfo = {\n        responses: progressData.responses,\n        currentQuestion: progressData.currentQuestion,\n        startTime: progressData.startTime.toISOString(),\n        status: progressData.status,\n        lastSaved: new Date().toISOString()\n      };\n\n      localStorage.setItem(progressKey, JSON.stringify(progressInfo));\n    } catch (error) {\n      console.error('Error saving progress:', error);\n      // Don't throw error for progress saving as it's not critical\n    }\n  }\n\n  /**\n   * Load saved progress\n   */\n  public async loadProgress(userId: string, quizType: string): Promise<{\n    responses: QuizResponse[];\n    currentQuestion: number;\n    startTime: Date;\n    status: string;\n  } | null> {\n    try {\n      const progressKey = `quiz_progress_${userId}_${quizType}`;\n      const savedProgress = localStorage.getItem(progressKey);\n\n      if (!savedProgress) {\n        return null;\n      }\n\n      const progress = JSON.parse(savedProgress);\n      return {\n        responses: progress.responses,\n        currentQuestion: progress.currentQuestion,\n        startTime: new Date(progress.startTime),\n        status: progress.status\n      };\n    } catch (error) {\n      console.error('Error loading progress:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Clear saved progress\n   */\n  public async clearProgress(userId: string, quizType: string): Promise<void> {\n    try {\n      const progressKey = `quiz_progress_${userId}_${quizType}`;\n      localStorage.removeItem(progressKey);\n    } catch (error) {\n      console.error('Error clearing progress:', error);\n    }\n  }\n\n  /**\n   * Get quiz statistics\n   */\n  public async getQuizStatistics(quizType?: string): Promise<{\n    totalParticipants: number;\n    averageScore: number;\n    completionRate: number;\n    averageCompletionTime: number;\n    categoryBreakdown: { [key: string]: number };\n  }> {\n    try {\n      const results = await this.sharePointService.getQuizResults();\n      \n      let filteredResults = results;\n      if (quizType) {\n        filteredResults = results.filter(r => r.QuizType === quizType);\n      }\n\n      const completedResults = filteredResults.filter(r => r.Status === 'Completed');\n      \n      const statistics = {\n        totalParticipants: filteredResults.length,\n        averageScore: this.calculateAverageScore(completedResults),\n        completionRate: filteredResults.length > 0 ? (completedResults.length / filteredResults.length) * 100 : 0,\n        averageCompletionTime: this.calculateAverageCompletionTime(completedResults),\n        categoryBreakdown: this.calculateCategoryBreakdown(completedResults)\n      };\n\n      return statistics;\n    } catch (error) {\n      console.error('Error getting quiz statistics:', error);\n      throw new Error('Impossible de charger les statistiques du quiz');\n    }\n  }\n\n  /**\n   * Export quiz results\n   */\n  public async exportResults(quizType?: string, format: 'csv' | 'json' = 'csv'): Promise<void> {\n    try {\n      const results = await this.sharePointService.getQuizResults();\n      \n      let dataToExport = results;\n      if (quizType) {\n        dataToExport = results.filter(r => r.QuizType === quizType);\n      }\n\n      if (format === 'csv') {\n        await this.exportToCSV(dataToExport, quizType);\n      } else {\n        await this.exportToJSON(dataToExport, quizType);\n      }\n    } catch (error) {\n      console.error('Error exporting results:', error);\n      throw new Error('Impossible d\\'exporter les résultats');\n    }\n  }\n\n  /**\n   * Validate quiz responses\n   */\n  public validateResponses(questions: QuizQuestion[], responses: QuizResponse[]): {\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check if all required questions are answered\n    const requiredQuestions = questions.filter(q => q.required);\n    const answeredQuestionIds = responses.map(r => r.questionId);\n\n    for (const question of requiredQuestions) {\n      if (!answeredQuestionIds.includes(question.id)) {\n        errors.push(`La question \"${question.question}\" est obligatoire`);\n      }\n    }\n\n    // Check response formats\n    for (const response of responses) {\n      const question = questions.find(q => q.id === response.questionId);\n      if (!question) {\n        warnings.push(`Question non trouvée pour la réponse ${response.questionId}`);\n        continue;\n      }\n\n      // Validate based on question type\n      switch (question.type) {\n        case 'multiple-choice':\n          if (!question.options.some(opt => opt.id === response.answer)) {\n            errors.push(`Réponse invalide pour la question \"${question.question}\"`);\n          }\n          break;\n        case 'rating':\n          const rating = Number(response.answer);\n          if (isNaN(rating) || rating < 1 || rating > 5) {\n            errors.push(`Note invalide pour la question \"${question.question}\" (doit être entre 1 et 5)`);\n          }\n          break;\n        case 'text':\n          if (question.required && (!response.answer || response.answer.toString().trim().length === 0)) {\n            errors.push(`Réponse textuelle requise pour la question \"${question.question}\"`);\n          }\n          break;\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Calculate quiz score\n   */\n  public calculateScore(questions: QuizQuestion[], responses: QuizResponse[]): {\n    score: number;\n    totalPossible: number;\n    correctAnswers: number;\n    percentage: number;\n  } {\n    let score = 0;\n    let totalPossible = 0;\n    let correctAnswers = 0;\n\n    for (const question of questions) {\n      if (question.correctAnswer) { // Only count questions with correct answers\n        totalPossible += question.points;\n        \n        const response = responses.find(r => r.questionId === question.id);\n        if (response && response.answer === question.correctAnswer) {\n          score += question.points;\n          correctAnswers++;\n        }\n      }\n    }\n\n    return {\n      score,\n      totalPossible,\n      correctAnswers,\n      percentage: totalPossible > 0 ? Math.round((score / totalPossible) * 100) : 0\n    };\n  }\n\n  /**\n   * Transform SharePoint items to QuizQuestion format\n   */\n  private transformIntroductionItem(item: QuizIntroductionItem): QuizQuestion {\n    return {\n      id: item.Id.toString(),\n      title: item.Title,\n      question: item.Question,\n      type: 'multiple-choice',\n      options: Array.isArray(item.Options) ? \n        item.Options.map((opt, index) => ({\n          id: (index + 1).toString(),\n          text: opt,\n          correct: opt === item.CorrectAnswer\n        })) : [],\n      correctAnswer: item.CorrectAnswer,\n      category: item.Category,\n      points: item.Points,\n      order: item.Order,\n      required: true\n    };\n  }\n\n  private transformSurveyItem(item: QuizSondageItem): QuizQuestion {\n    return {\n      id: item.Id.toString(),\n      title: item.Title,\n      question: item.Question,\n      type: this.mapQuestionType(item.QuestionType),\n      options: Array.isArray(item.Options) ? \n        item.Options.map((opt, index) => ({\n          id: (index + 1).toString(),\n          text: opt\n        })) : [],\n      points: 0,\n      order: item.Order,\n      required: item.Required\n    };\n  }\n\n  private transformResultItem(item: QuizResultsItem): QuizResult {\n    return {\n      id: item.Id.toString(),\n      userId: item.User.Email,\n      userName: item.User.Title,\n      quizType: item.QuizType as 'Introduction' | 'Sondage',\n      responses: Array.isArray(item.Responses) ? item.Responses : [],\n      score: item.Score,\n      totalQuestions: this.getTotalQuestions(item.Responses),\n      correctAnswers: this.getCorrectAnswers(item.Responses),\n      startTime: new Date(item.Created),\n      endTime: new Date(item.CompletionDate || item.Modified),\n      duration: item.Duration,\n      status: item.Status as 'Completed' | 'In Progress' | 'Abandoned'\n    };\n  }\n\n  private mapQuestionType(spType: string): 'multiple-choice' | 'text' | 'rating' {\n    switch (spType) {\n      case 'Multiple Choice': return 'multiple-choice';\n      case 'Text': return 'text';\n      case 'Rating': return 'rating';\n      default: return 'text';\n    }\n  }\n\n  private getTotalQuestions(responses: any): number {\n    if (Array.isArray(responses)) {\n      return responses.length;\n    }\n    return 0;\n  }\n\n  private getCorrectAnswers(responses: any): number {\n    if (Array.isArray(responses)) {\n      return responses.filter(r => r.correct === true).length;\n    }\n    return 0;\n  }\n\n  private calculateAverageScore(results: QuizResultsItem[]): number {\n    if (results.length === 0) return 0;\n    \n    const totalScore = results.reduce((sum, result) => sum + (result.Score || 0), 0);\n    return Math.round(totalScore / results.length);\n  }\n\n  private calculateAverageCompletionTime(results: QuizResultsItem[]): number {\n    if (results.length === 0) return 0;\n    \n    const totalTime = results.reduce((sum, result) => sum + (result.Duration || 0), 0);\n    return Math.round(totalTime / results.length);\n  }\n\n  private calculateCategoryBreakdown(results: QuizResultsItem[]): { [key: string]: number } {\n    const breakdown: { [key: string]: number } = {};\n    \n    for (const result of results) {\n      const category = result.QuizType || 'Unknown';\n      breakdown[category] = (breakdown[category] || 0) + 1;\n    }\n    \n    return breakdown;\n  }\n\n  private async exportToCSV(data: QuizResultsItem[], quizType?: string): Promise<void> {\n    const headers = [\n      'ID',\n      'Utilisateur',\n      'Email',\n      'Type de Quiz',\n      'Score',\n      'Statut',\n      'Date de Completion',\n      'Durée (secondes)',\n      'Date de Création'\n    ];\n\n    const rows = data.map(item => [\n      item.Id,\n      item.User.Title,\n      item.User.Email,\n      item.QuizType,\n      item.Score || 0,\n      item.Status,\n      item.CompletionDate,\n      item.Duration || 0,\n      item.Created\n    ]);\n\n    const csvContent = [headers, ...rows]\n      .map(row => row.map(cell => `\"${cell}\"`).join(','))\n      .join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `quiz-results${quizType ? `-${quizType}` : ''}-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  private async exportToJSON(data: QuizResultsItem[], quizType?: string): Promise<void> {\n    const exportData = {\n      exportDate: new Date().toISOString(),\n      quizType: quizType || 'All',\n      totalRecords: data.length,\n      data: data\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `quiz-results${quizType ? `-${quizType}` : ''}-${new Date().toISOString().split('T')[0]}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n}"]}