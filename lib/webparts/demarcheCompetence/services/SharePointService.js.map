{"version":3,"file":"SharePointService.js","sourceRoot":"","sources":["../../../../src/webparts/demarcheCompetence/services/SharePointService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAErC,OAAO,cAAc,CAAC;AACtB,OAAO,eAAe,CAAC;AACvB,OAAO,eAAe,CAAC;AACvB,OAAO,gBAAgB,CAAC;AACxB,OAAO,wBAAwB,CAAC;AAChC,OAAO,kBAAkB,CAAC;AAS1B,MAAM,OAAO,iBAAiB;IAI5B,YAAY,OAAuB;QA+iBnC;;WAEG;QACK,UAAK,GAAG,IAAI,GAAG,EAAyD,CAAC;QAjjB/E,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc;QACzB,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;YAC7C,OAAO;gBACL,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,SAAS,EAAE,IAAI,CAAC,SAAS;aAC1B,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,4BAA4B;QACvC,IAAI;YACF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBAClC,UAAU,CAAC,mBAAmB,CAAC;iBAC/B,KAAK;iBACL,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC;iBACnH,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC;YAE5B,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,iCACpB,IAAI,KACP,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,IACzC,CAAC,CAAC;SACL;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;YACnE,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,2BAA2B,CAAC,QAAuC;QAC9E,IAAI;YACF,MAAM,YAAY,GAAG;gBACnB,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;gBAC3B,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC;gBACzC,aAAa,EAAE,QAAQ,CAAC,aAAa;gBACrC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;gBAC3B,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,KAAK,EAAE,QAAQ,CAAC,KAAK;aACtB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACnC,UAAU,CAAC,mBAAmB,CAAC;iBAC/B,KAAK;iBACL,GAAG,CAAC,YAAY,CAAC,CAAC;YAErB,OAAO,MAAM,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACnE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;YACjE,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,8BAA8B,CAAC,EAAU,EAAE,QAAuC;QAC7F,IAAI;YACF,MAAM,YAAY,yGACb,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,GAC7C,CAAC,QAAQ,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,GACtD,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,GACnE,CAAC,QAAQ,CAAC,aAAa,IAAI,EAAE,aAAa,EAAE,QAAQ,CAAC,aAAa,EAAE,CAAC,GACrE,CAAC,QAAQ,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,GACtD,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,GAChD,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CACjD,CAAC;YAEF,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACpB,UAAU,CAAC,mBAAmB,CAAC;iBAC/B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,CAAC,YAAY,CAAC,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;YACnE,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,8BAA8B,CAAC,EAAU;QACpD,IAAI;YACF,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACpB,UAAU,CAAC,mBAAmB,CAAC;iBAC/B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,EAAE,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;YACnE,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEO,KAAK,CAAC,+BAA+B,CAAC,EAAU;QACtD,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACjC,UAAU,CAAC,mBAAmB,CAAC;iBAC/B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,EAAE,CAAC;YAEzH,uCACK,IAAI,KACP,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,IACzC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;YACxE,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,uBAAuB;QAClC,IAAI;YACF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBAClC,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC;iBACxG,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC;YAE5B,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,iCACpB,IAAI,KACP,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,IACzC,CAAC,CAAC;SACL;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,sBAAsB,CAAC,QAAkC;QACpE,IAAI;YACF,MAAM,YAAY,GAAG;gBACnB,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;gBAC3B,YAAY,EAAE,QAAQ,CAAC,YAAY;gBACnC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC;gBACzC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;gBAC3B,KAAK,EAAE,QAAQ,CAAC,KAAK;aACtB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACnC,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,GAAG,CAAC,YAAY,CAAC,CAAC;YAErB,OAAO,MAAM,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC9D;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,yBAAyB,CAAC,EAAU,EAAE,QAAkC;QACnF,IAAI;YACF,MAAM,YAAY,2FACb,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,GAC7C,CAAC,QAAQ,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,GACtD,CAAC,QAAQ,CAAC,YAAY,IAAI,EAAE,YAAY,EAAE,QAAQ,CAAC,YAAY,EAAE,CAAC,GAClE,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,GACnE,CAAC,QAAQ,CAAC,QAAQ,KAAK,SAAS,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,GACpE,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CACjD,CAAC;YAEF,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACpB,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,CAAC,YAAY,CAAC,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,yBAAyB,CAAC,EAAU;QAC/C,IAAI;YACF,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACpB,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,EAAE,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEO,KAAK,CAAC,0BAA0B,CAAC,EAAU;QACjD,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACjC,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,EAAE,CAAC;YAE9G,uCACK,IAAI,KACP,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,IACzC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;YACnE,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc,CAAC,MAAe;QACzC,IAAI;YACF,IAAI,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBAC1B,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,gBAAgB,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC;iBAClJ,MAAM,CAAC,MAAM,CAAC;iBACd,OAAO,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;YAEpC,IAAI,MAAM,EAAE;gBACV,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC;aACnD;YAED,MAAM,KAAK,GAAG,MAAM,KAAK,EAAE,CAAC;YAE5B,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,iCACpB,IAAI,KACP,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,EAC7C,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,IACtF,CAAC,CAAC;SACL;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,MAAgC;QAC1D,IAAI;YACF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAEhD,MAAM,UAAU,GAAG;gBACjB,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,QAAQ,MAAM,WAAW,CAAC,KAAK,MAAM,IAAI,IAAI,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;gBAC9G,MAAM,EAAE,WAAW,CAAC,EAAE;gBACtB,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC;gBAC3C,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,CAAC;gBACxB,cAAc,EAAE,MAAM,CAAC,cAAc,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACjE,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,MAAM,EAAE,MAAM,CAAC,MAAM;aACtB,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACrC,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,GAAG,CAAC,UAAU,CAAC,CAAC;YAEnB,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACvD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,EAAU,EAAE,MAAgC;QACxE,IAAI;YACF,MAAM,UAAU,2FACX,CAAC,MAAM,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,GAClD,CAAC,MAAM,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,GACrE,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,GACvD,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,cAAc,EAAE,CAAC,GACpE,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,GAChE,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAChD,CAAC;YAEF,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACpB,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,CAAC,UAAU,CAAC,CAAC;SACvB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,EAAU;QACtC,IAAI;YACF,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACpB,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,EAAE,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,EAAU;QACxC,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACjC,UAAU,CAAC,cAAc,CAAC;iBAC1B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,gBAAgB,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC;iBAClJ,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YAEpB,uCACK,IAAI,KACP,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,EAC7C,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,IACtF;SACH;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,eAAe,CAAC,MAAe;QAC1C,IAAI;YACF,IAAI,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBAC1B,UAAU,CAAC,eAAe,CAAC;iBAC3B,KAAK;iBACL,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,EAAE,cAAc,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC;iBACzK,MAAM,CAAC,MAAM,CAAC;iBACd,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAEnC,IAAI,MAAM,EAAE;gBACV,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC;aACnD;YAED,MAAM,KAAK,GAAG,MAAM,KAAK,EAAE,CAAC;YAE5B,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,iCACpB,IAAI,KACP,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,EACtF,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,IACtF,CAAC,CAAC;SACL;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACrD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,QAAmC;QAC/D,IAAI;YACF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAEhD,MAAM,YAAY,GAAG;gBACnB,KAAK,EAAE,QAAQ,CAAC,KAAK,IAAI,GAAG,QAAQ,CAAC,cAAc,MAAM,WAAW,CAAC,KAAK,EAAE;gBAC5E,MAAM,EAAE,WAAW,CAAC,EAAE;gBACtB,cAAc,EAAE,QAAQ,CAAC,cAAc;gBACvC,YAAY,EAAE,QAAQ,CAAC,YAAY;gBACnC,WAAW,EAAE,QAAQ,CAAC,WAAW;gBACjC,cAAc,EAAE,QAAQ,CAAC,cAAc;gBACvC,cAAc,EAAE,QAAQ,CAAC,cAAc;gBACvC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACrC,UAAU,CAAC,eAAe,CAAC;iBAC3B,KAAK;iBACL,GAAG,CAAC,YAAY,CAAC,CAAC;YAErB,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACzD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,EAAU,EAAE,QAAmC;QAC7E,IAAI;YACF,MAAM,YAAY,2FACb,CAAC,QAAQ,CAAC,cAAc,IAAI,EAAE,cAAc,EAAE,QAAQ,CAAC,cAAc,EAAE,CAAC,GACxE,CAAC,QAAQ,CAAC,YAAY,KAAK,SAAS,IAAI,EAAE,YAAY,EAAE,QAAQ,CAAC,YAAY,EAAE,CAAC,GAChF,CAAC,QAAQ,CAAC,WAAW,KAAK,SAAS,IAAI,EAAE,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC,GAC7E,CAAC,QAAQ,CAAC,cAAc,IAAI,EAAE,cAAc,EAAE,QAAQ,CAAC,cAAc,EAAE,CAAC,GACxE,CAAC,QAAQ,CAAC,cAAc,IAAI,EAAE,cAAc,EAAE,QAAQ,CAAC,cAAc,EAAE,CAAC,GACxE,CAAC,QAAQ,CAAC,QAAQ,KAAK,SAAS,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CACxE,CAAC;YAEF,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACpB,UAAU,CAAC,eAAe,CAAC;iBAC3B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,CAAC,YAAY,CAAC,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,EAAU;QACxC,IAAI;YACF,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACpB,UAAU,CAAC,eAAe,CAAC;iBAC3B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,EAAE,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,EAAU;QAC1C,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;iBACjC,UAAU,CAAC,eAAe,CAAC;iBAC3B,KAAK;iBACL,OAAO,CAAC,EAAE,CAAC;iBACX,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,EAAE,cAAc,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC;iBACzK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YAEpB,uCACK,IAAI,KACP,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,EACtF,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,IACtF;SACH;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,eAAe,CAAC,SAAiB;QAC5C,IAAI;YACF,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YAChD,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,SAAiB,EACjB,MAAiB,EACjB,MAAe,EACf,OAAgB,EAChB,GAAY;QAEZ,IAAI;YACF,IAAI,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;YAE1D,IAAI,MAAM,EAAE;gBACV,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;aACjC;YAED,IAAI,MAAM,EAAE;gBACV,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aAC9B;YAED,IAAI,OAAO,EAAE;gBACX,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aACtC;YAED,IAAI,GAAG,EAAE;gBACP,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACxB;YAED,OAAO,MAAM,KAAK,EAAE,CAAC;SACtB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,iCAAiC,SAAS,GAAG,EAAE,KAAK,CAAC,CAAC;YACpE,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,eAAe,CAC1B,SAAiB,EACjB,OAAgD;QAEhD,IAAI;YACF,uEAAuE;YACvE,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAErD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC5B,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACzD;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,qCAAqC,SAAS,GAAG,EAAE,KAAK,CAAC,CAAC;YACxE,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,aAAa,CACxB,SAAiB,EACjB,QAAiB;QAEjB,IAAI;YACF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YACjD,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC5B,yDAAyD;gBACzD,MAAM,UAAU,GAAQ,EAAE,CAAC;gBAC3B,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;oBACtB,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;wBACvD,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;qBAC7B;iBACF;gBACD,OAAO,UAAU,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,iBAAiB;YACjB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO;YAE9B,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,UAAU,GAAG;gBACjB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;gBACjB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CACtC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAClC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACb,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,gBAAgB;YAChB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC,CAAC;YACzE,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACzC,MAAM,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAC/B,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,QAAQ,IAAI,GAAG,SAAS,aAAa,CAAC,CAAC;YACrE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;YACjC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SACjC;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACK,SAAS,CAAC,UAAkB,EAAE,eAAoB,IAAI;QAC5D,IAAI;YACF,OAAO,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;SAC3D;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAC3C,OAAO,YAAY,CAAC;SACrB;IACH,CAAC;IAOM,UAAU;QACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAEM,gBAAgB,CAAC,GAAW;QACjC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;CACF","sourcesContent":["import { spfi, SPFx } from '@pnp/sp';\nimport { WebPartContext } from '@microsoft/sp-webpart-base';\nimport '@pnp/sp/webs';\nimport '@pnp/sp/lists';\nimport '@pnp/sp/items';\nimport '@pnp/sp/fields';\nimport '@pnp/sp/site-users/web';\nimport '@pnp/sp/profiles';\nimport type {\n  QuizIntroductionItem,\n  QuizSondageItem,\n  QuizResultsItem,\n  UserProgressItem,\n  SharePointListItem\n} from '../types/index';\n\nexport class SharePointService {\n  private sp: ReturnType<typeof spfi>;\n  private context: WebPartContext;\n\n  constructor(context: WebPartContext) {\n    this.context = context;\n    this.sp = spfi().using(SPFx(context));\n  }\n\n  /**\n   * Get current user information\n   */\n  public async getCurrentUser() {\n    try {\n      const user = await this.sp.web.currentUser();\n      return {\n        id: user.Id,\n        title: user.Title,\n        email: user.Email,\n        loginName: user.LoginName\n      };\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Quiz Introduction Methods\n   */\n  public async getQuizIntroductionQuestions(): Promise<QuizIntroductionItem[]> {\n    try {\n      const items = await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .select('Id', 'Title', 'Question', 'Options', 'CorrectAnswer', 'Category', 'Points', 'Order', 'Created', 'Modified')\n        .orderBy('Order', true)();\n\n      return items.map(item => ({\n        ...item,\n        Options: this.parseJSON(item.Options, []),\n      }));\n    } catch (error) {\n      console.error('Error loading quiz introduction questions:', error);\n      throw error;\n    }\n  }\n\n  public async addQuizIntroductionQuestion(question: Partial<QuizIntroductionItem>): Promise<QuizIntroductionItem> {\n    try {\n      const questionData = {\n        Title: question.Title,\n        Question: question.Question,\n        Options: JSON.stringify(question.Options),\n        CorrectAnswer: question.CorrectAnswer,\n        Category: question.Category,\n        Points: question.Points,\n        Order: question.Order\n      };\n\n      const result = await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .add(questionData);\n\n      return await this.getQuizIntroductionQuestionById(result.data.Id);\n    } catch (error) {\n      console.error('Error adding quiz introduction question:', error);\n      throw error;\n    }\n  }\n\n  public async updateQuizIntroductionQuestion(id: number, question: Partial<QuizIntroductionItem>): Promise<void> {\n    try {\n      const questionData = {\n        ...(question.Title && { Title: question.Title }),\n        ...(question.Question && { Question: question.Question }),\n        ...(question.Options && { Options: JSON.stringify(question.Options) }),\n        ...(question.CorrectAnswer && { CorrectAnswer: question.CorrectAnswer }),\n        ...(question.Category && { Category: question.Category }),\n        ...(question.Points && { Points: question.Points }),\n        ...(question.Order && { Order: question.Order })\n      };\n\n      await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .getById(id)\n        .update(questionData);\n    } catch (error) {\n      console.error('Error updating quiz introduction question:', error);\n      throw error;\n    }\n  }\n\n  public async deleteQuizIntroductionQuestion(id: number): Promise<void> {\n    try {\n      await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .getById(id)\n        .delete();\n    } catch (error) {\n      console.error('Error deleting quiz introduction question:', error);\n      throw error;\n    }\n  }\n\n  private async getQuizIntroductionQuestionById(id: number): Promise<QuizIntroductionItem> {\n    try {\n      const item = await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .getById(id)\n        .select('Id', 'Title', 'Question', 'Options', 'CorrectAnswer', 'Category', 'Points', 'Order', 'Created', 'Modified')();\n\n      return {\n        ...item,\n        Options: this.parseJSON(item.Options, []),\n      };\n    } catch (error) {\n      console.error('Error getting quiz introduction question by id:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Quiz Sondage Methods\n   */\n  public async getQuizSondageQuestions(): Promise<QuizSondageItem[]> {\n    try {\n      const items = await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .select('Id', 'Title', 'Question', 'QuestionType', 'Options', 'Required', 'Order', 'Created', 'Modified')\n        .orderBy('Order', true)();\n\n      return items.map(item => ({\n        ...item,\n        Options: this.parseJSON(item.Options, []),\n      }));\n    } catch (error) {\n      console.error('Error loading quiz sondage questions:', error);\n      throw error;\n    }\n  }\n\n  public async addQuizSondageQuestion(question: Partial<QuizSondageItem>): Promise<QuizSondageItem> {\n    try {\n      const questionData = {\n        Title: question.Title,\n        Question: question.Question,\n        QuestionType: question.QuestionType,\n        Options: JSON.stringify(question.Options),\n        Required: question.Required,\n        Order: question.Order\n      };\n\n      const result = await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .add(questionData);\n\n      return await this.getQuizSondageQuestionById(result.data.Id);\n    } catch (error) {\n      console.error('Error adding quiz sondage question:', error);\n      throw error;\n    }\n  }\n\n  public async updateQuizSondageQuestion(id: number, question: Partial<QuizSondageItem>): Promise<void> {\n    try {\n      const questionData = {\n        ...(question.Title && { Title: question.Title }),\n        ...(question.Question && { Question: question.Question }),\n        ...(question.QuestionType && { QuestionType: question.QuestionType }),\n        ...(question.Options && { Options: JSON.stringify(question.Options) }),\n        ...(question.Required !== undefined && { Required: question.Required }),\n        ...(question.Order && { Order: question.Order })\n      };\n\n      await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .getById(id)\n        .update(questionData);\n    } catch (error) {\n      console.error('Error updating quiz sondage question:', error);\n      throw error;\n    }\n  }\n\n  public async deleteQuizSondageQuestion(id: number): Promise<void> {\n    try {\n      await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .getById(id)\n        .delete();\n    } catch (error) {\n      console.error('Error deleting quiz sondage question:', error);\n      throw error;\n    }\n  }\n\n  private async getQuizSondageQuestionById(id: number): Promise<QuizSondageItem> {\n    try {\n      const item = await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .getById(id)\n        .select('Id', 'Title', 'Question', 'QuestionType', 'Options', 'Required', 'Order', 'Created', 'Modified')();\n\n      return {\n        ...item,\n        Options: this.parseJSON(item.Options, []),\n      };\n    } catch (error) {\n      console.error('Error getting quiz sondage question by id:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Quiz Results Methods\n   */\n  public async getQuizResults(userId?: string): Promise<QuizResultsItem[]> {\n    try {\n      let query = this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .select('Id', 'Title', 'User/Title', 'User/Email', 'QuizType', 'Responses', 'Score', 'CompletionDate', 'Duration', 'Status', 'Created', 'Modified')\n        .expand('User')\n        .orderBy('CompletionDate', false);\n\n      if (userId) {\n        query = query.filter(`User/Email eq '${userId}'`);\n      }\n\n      const items = await query();\n\n      return items.map(item => ({\n        ...item,\n        Responses: this.parseJSON(item.Responses, []),\n        CompletionDate: item.CompletionDate ? new Date(item.CompletionDate).toISOString() : ''\n      }));\n    } catch (error) {\n      console.error('Error loading quiz results:', error);\n      throw error;\n    }\n  }\n\n  public async saveQuizResult(result: Partial<QuizResultsItem>): Promise<QuizResultsItem> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      \n      const resultData = {\n        Title: result.Title || `${result.QuizType} - ${currentUser.title} - ${new Date().toLocaleDateString('fr-FR')}`,\n        UserId: currentUser.id,\n        QuizType: result.QuizType,\n        Responses: JSON.stringify(result.Responses),\n        Score: result.Score || 0,\n        CompletionDate: result.CompletionDate || new Date().toISOString(),\n        Duration: result.Duration,\n        Status: result.Status\n      };\n\n      const response = await this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .add(resultData);\n\n      return await this.getQuizResultById(response.data.Id);\n    } catch (error) {\n      console.error('Error saving quiz result:', error);\n      throw error;\n    }\n  }\n\n  public async updateQuizResult(id: number, result: Partial<QuizResultsItem>): Promise<void> {\n    try {\n      const resultData = {\n        ...(result.QuizType && { QuizType: result.QuizType }),\n        ...(result.Responses && { Responses: JSON.stringify(result.Responses) }),\n        ...(result.Score !== undefined && { Score: result.Score }),\n        ...(result.CompletionDate && { CompletionDate: result.CompletionDate }),\n        ...(result.Duration !== undefined && { Duration: result.Duration }),\n        ...(result.Status && { Status: result.Status })\n      };\n\n      await this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .getById(id)\n        .update(resultData);\n    } catch (error) {\n      console.error('Error updating quiz result:', error);\n      throw error;\n    }\n  }\n\n  public async deleteQuizResult(id: number): Promise<void> {\n    try {\n      await this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .getById(id)\n        .delete();\n    } catch (error) {\n      console.error('Error deleting quiz result:', error);\n      throw error;\n    }\n  }\n\n  private async getQuizResultById(id: number): Promise<QuizResultsItem> {\n    try {\n      const item = await this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .getById(id)\n        .select('Id', 'Title', 'User/Title', 'User/Email', 'QuizType', 'Responses', 'Score', 'CompletionDate', 'Duration', 'Status', 'Created', 'Modified')\n        .expand('User')();\n\n      return {\n        ...item,\n        Responses: this.parseJSON(item.Responses, []),\n        CompletionDate: item.CompletionDate ? new Date(item.CompletionDate).toISOString() : ''\n      };\n    } catch (error) {\n      console.error('Error getting quiz result by id:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * User Progress Methods\n   */\n  public async getUserProgress(userId?: string): Promise<UserProgressItem[]> {\n    try {\n      let query = this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .select('Id', 'Title', 'User/Title', 'User/Email', 'CompetenceArea', 'CurrentLevel', 'TargetLevel', 'LastAssessment', 'NextAssessment', 'Progress', 'Created', 'Modified')\n        .expand('User')\n        .orderBy('CompetenceArea', true);\n\n      if (userId) {\n        query = query.filter(`User/Email eq '${userId}'`);\n      }\n\n      const items = await query();\n\n      return items.map(item => ({\n        ...item,\n        LastAssessment: item.LastAssessment ? new Date(item.LastAssessment).toISOString() : '',\n        NextAssessment: item.NextAssessment ? new Date(item.NextAssessment).toISOString() : ''\n      }));\n    } catch (error) {\n      console.error('Error loading user progress:', error);\n      throw error;\n    }\n  }\n\n  public async saveUserProgress(progress: Partial<UserProgressItem>): Promise<UserProgressItem> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      \n      const progressData = {\n        Title: progress.Title || `${progress.CompetenceArea} - ${currentUser.title}`,\n        UserId: currentUser.id,\n        CompetenceArea: progress.CompetenceArea,\n        CurrentLevel: progress.CurrentLevel,\n        TargetLevel: progress.TargetLevel,\n        LastAssessment: progress.LastAssessment,\n        NextAssessment: progress.NextAssessment,\n        Progress: progress.Progress\n      };\n\n      const response = await this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .add(progressData);\n\n      return await this.getUserProgressById(response.data.Id);\n    } catch (error) {\n      console.error('Error saving user progress:', error);\n      throw error;\n    }\n  }\n\n  public async updateUserProgress(id: number, progress: Partial<UserProgressItem>): Promise<void> {\n    try {\n      const progressData = {\n        ...(progress.CompetenceArea && { CompetenceArea: progress.CompetenceArea }),\n        ...(progress.CurrentLevel !== undefined && { CurrentLevel: progress.CurrentLevel }),\n        ...(progress.TargetLevel !== undefined && { TargetLevel: progress.TargetLevel }),\n        ...(progress.LastAssessment && { LastAssessment: progress.LastAssessment }),\n        ...(progress.NextAssessment && { NextAssessment: progress.NextAssessment }),\n        ...(progress.Progress !== undefined && { Progress: progress.Progress })\n      };\n\n      await this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .getById(id)\n        .update(progressData);\n    } catch (error) {\n      console.error('Error updating user progress:', error);\n      throw error;\n    }\n  }\n\n  public async deleteUserProgress(id: number): Promise<void> {\n    try {\n      await this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .getById(id)\n        .delete();\n    } catch (error) {\n      console.error('Error deleting user progress:', error);\n      throw error;\n    }\n  }\n\n  private async getUserProgressById(id: number): Promise<UserProgressItem> {\n    try {\n      const item = await this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .getById(id)\n        .select('Id', 'Title', 'User/Title', 'User/Email', 'CompetenceArea', 'CurrentLevel', 'TargetLevel', 'LastAssessment', 'NextAssessment', 'Progress', 'Created', 'Modified')\n        .expand('User')();\n\n      return {\n        ...item,\n        LastAssessment: item.LastAssessment ? new Date(item.LastAssessment).toISOString() : '',\n        NextAssessment: item.NextAssessment ? new Date(item.NextAssessment).toISOString() : ''\n      };\n    } catch (error) {\n      console.error('Error getting user progress by id:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Utility Methods\n   */\n  public async checkListExists(listTitle: string): Promise<boolean> {\n    try {\n      await this.sp.web.lists.getByTitle(listTitle)();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  public async getListItems<T = SharePointListItem>(\n    listTitle: string,\n    select?: string[],\n    filter?: string,\n    orderBy?: string,\n    top?: number\n  ): Promise<T[]> {\n    try {\n      let query = this.sp.web.lists.getByTitle(listTitle).items;\n\n      if (select) {\n        query = query.select(...select);\n      }\n\n      if (filter) {\n        query = query.filter(filter);\n      }\n\n      if (orderBy) {\n        query = query.orderBy(orderBy, true);\n      }\n\n      if (top) {\n        query = query.top(top);\n      }\n\n      return await query();\n    } catch (error) {\n      console.error(`Error getting items from list ${listTitle}:`, error);\n      throw error;\n    }\n  }\n\n  public async bulkUpdateItems<T = any>(\n    listTitle: string,\n    updates: Array<{ id: number; data: Partial<T> }>\n  ): Promise<void> {\n    try {\n      // Use sequential updates for now - batch operations can be added later\n      const list = this.sp.web.lists.getByTitle(listTitle);\n      \n      for (const update of updates) {\n        await list.items.getById(update.id).update(update.data);\n      }\n    } catch (error) {\n      console.error(`Error bulk updating items in list ${listTitle}:`, error);\n      throw error;\n    }\n  }\n\n  public async exportToExcel(\n    listTitle: string,\n    fileName?: string\n  ): Promise<void> {\n    try {\n      const items = await this.getListItems(listTitle);\n      const data = items.map(item => {\n        // Remove complex objects and keep only simple properties\n        const simpleItem: any = {};\n        for (const key in item) {\n          if (typeof item[key] !== 'object' || item[key] === null) {\n            simpleItem[key] = item[key];\n          }\n        }\n        return simpleItem;\n      });\n\n      // Convert to CSV\n      if (data.length === 0) return;\n\n      const headers = Object.keys(data[0]);\n      const csvContent = [\n        headers.join(','),\n        ...data.map(row => headers.map(header => \n          JSON.stringify(row[header] || '')\n        ).join(','))\n      ].join('\\n');\n\n      // Download file\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', fileName || `${listTitle}-export.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error exporting to Excel:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Helper Methods\n   */\n  private parseJSON(jsonString: string, defaultValue: any = null): any {\n    try {\n      return jsonString ? JSON.parse(jsonString) : defaultValue;\n    } catch (error) {\n      console.warn('Error parsing JSON:', error);\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Cache Management\n   */\n  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();\n\n  public clearCache(): void {\n    this.cache.clear();\n  }\n\n  public removeCacheEntry(key: string): void {\n    this.cache.delete(key);\n  }\n}"]}