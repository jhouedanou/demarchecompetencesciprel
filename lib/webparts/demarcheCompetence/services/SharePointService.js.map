{"version":3,"file":"SharePointService.js","sourceRoot":"","sources":["../../../../src/webparts/demarcheCompetence/services/SharePointService.ts"],"names":[],"mappings":"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","sourcesContent":["import { spfi, SPFx } from '@pnp/sp';\nimport { WebPartContext } from '@microsoft/sp-webpart-base';\nimport '@pnp/sp/webs';\nimport '@pnp/sp/lists';\nimport '@pnp/sp/items';\nimport '@pnp/sp/fields';\nimport '@pnp/sp/site-users/web';\nimport '@pnp/sp/profiles';\nimport type {\n  QuizIntroductionItem,\n  QuizSondageItem,\n  QuizResultsItem,\n  UserProgressItem,\n  SharePointListItem\n} from '@types/index';\n\nexport class SharePointService {\n  private sp: ReturnType<typeof spfi>;\n  private context: WebPartContext;\n\n  constructor(context: WebPartContext) {\n    this.context = context;\n    this.sp = spfi().using(SPFx(context));\n  }\n\n  /**\n   * Get current user information\n   */\n  public async getCurrentUser() {\n    try {\n      const user = await this.sp.web.currentUser();\n      return {\n        id: user.Id,\n        title: user.Title,\n        email: user.Email,\n        loginName: user.LoginName\n      };\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Quiz Introduction Methods\n   */\n  public async getQuizIntroductionQuestions(): Promise<QuizIntroductionItem[]> {\n    try {\n      const items = await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .select('Id', 'Title', 'Question', 'Options', 'CorrectAnswer', 'Category', 'Points', 'Order', 'Created', 'Modified')\n        .orderBy('Order', true)();\n\n      return items.map(item => ({\n        ...item,\n        Options: this.parseJSON(item.Options, []),\n      }));\n    } catch (error) {\n      console.error('Error loading quiz introduction questions:', error);\n      throw error;\n    }\n  }\n\n  public async addQuizIntroductionQuestion(question: Partial<QuizIntroductionItem>): Promise<QuizIntroductionItem> {\n    try {\n      const questionData = {\n        Title: question.Title,\n        Question: question.Question,\n        Options: JSON.stringify(question.Options),\n        CorrectAnswer: question.CorrectAnswer,\n        Category: question.Category,\n        Points: question.Points,\n        Order: question.Order\n      };\n\n      const result = await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .add(questionData);\n\n      return await this.getQuizIntroductionQuestionById(result.data.Id);\n    } catch (error) {\n      console.error('Error adding quiz introduction question:', error);\n      throw error;\n    }\n  }\n\n  public async updateQuizIntroductionQuestion(id: number, question: Partial<QuizIntroductionItem>): Promise<void> {\n    try {\n      const questionData = {\n        ...(question.Title && { Title: question.Title }),\n        ...(question.Question && { Question: question.Question }),\n        ...(question.Options && { Options: JSON.stringify(question.Options) }),\n        ...(question.CorrectAnswer && { CorrectAnswer: question.CorrectAnswer }),\n        ...(question.Category && { Category: question.Category }),\n        ...(question.Points && { Points: question.Points }),\n        ...(question.Order && { Order: question.Order })\n      };\n\n      await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .getById(id)\n        .update(questionData);\n    } catch (error) {\n      console.error('Error updating quiz introduction question:', error);\n      throw error;\n    }\n  }\n\n  public async deleteQuizIntroductionQuestion(id: number): Promise<void> {\n    try {\n      await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .getById(id)\n        .delete();\n    } catch (error) {\n      console.error('Error deleting quiz introduction question:', error);\n      throw error;\n    }\n  }\n\n  private async getQuizIntroductionQuestionById(id: number): Promise<QuizIntroductionItem> {\n    try {\n      const item = await this.sp.web.lists\n        .getByTitle('Quiz_Introduction')\n        .items\n        .getById(id)\n        .select('Id', 'Title', 'Question', 'Options', 'CorrectAnswer', 'Category', 'Points', 'Order', 'Created', 'Modified')();\n\n      return {\n        ...item,\n        Options: this.parseJSON(item.Options, []),\n      };\n    } catch (error) {\n      console.error('Error getting quiz introduction question by id:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Quiz Sondage Methods\n   */\n  public async getQuizSondageQuestions(): Promise<QuizSondageItem[]> {\n    try {\n      const items = await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .select('Id', 'Title', 'Question', 'QuestionType', 'Options', 'Required', 'Order', 'Created', 'Modified')\n        .orderBy('Order', true)();\n\n      return items.map(item => ({\n        ...item,\n        Options: this.parseJSON(item.Options, []),\n      }));\n    } catch (error) {\n      console.error('Error loading quiz sondage questions:', error);\n      throw error;\n    }\n  }\n\n  public async addQuizSondageQuestion(question: Partial<QuizSondageItem>): Promise<QuizSondageItem> {\n    try {\n      const questionData = {\n        Title: question.Title,\n        Question: question.Question,\n        QuestionType: question.QuestionType,\n        Options: JSON.stringify(question.Options),\n        Required: question.Required,\n        Order: question.Order\n      };\n\n      const result = await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .add(questionData);\n\n      return await this.getQuizSondageQuestionById(result.data.Id);\n    } catch (error) {\n      console.error('Error adding quiz sondage question:', error);\n      throw error;\n    }\n  }\n\n  public async updateQuizSondageQuestion(id: number, question: Partial<QuizSondageItem>): Promise<void> {\n    try {\n      const questionData = {\n        ...(question.Title && { Title: question.Title }),\n        ...(question.Question && { Question: question.Question }),\n        ...(question.QuestionType && { QuestionType: question.QuestionType }),\n        ...(question.Options && { Options: JSON.stringify(question.Options) }),\n        ...(question.Required !== undefined && { Required: question.Required }),\n        ...(question.Order && { Order: question.Order })\n      };\n\n      await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .getById(id)\n        .update(questionData);\n    } catch (error) {\n      console.error('Error updating quiz sondage question:', error);\n      throw error;\n    }\n  }\n\n  public async deleteQuizSondageQuestion(id: number): Promise<void> {\n    try {\n      await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .getById(id)\n        .delete();\n    } catch (error) {\n      console.error('Error deleting quiz sondage question:', error);\n      throw error;\n    }\n  }\n\n  private async getQuizSondageQuestionById(id: number): Promise<QuizSondageItem> {\n    try {\n      const item = await this.sp.web.lists\n        .getByTitle('Quiz_Sondage')\n        .items\n        .getById(id)\n        .select('Id', 'Title', 'Question', 'QuestionType', 'Options', 'Required', 'Order', 'Created', 'Modified')();\n\n      return {\n        ...item,\n        Options: this.parseJSON(item.Options, []),\n      };\n    } catch (error) {\n      console.error('Error getting quiz sondage question by id:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Quiz Results Methods\n   */\n  public async getQuizResults(userId?: string): Promise<QuizResultsItem[]> {\n    try {\n      let query = this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .select('Id', 'Title', 'User/Title', 'User/Email', 'QuizType', 'Responses', 'Score', 'CompletionDate', 'Duration', 'Status', 'Created', 'Modified')\n        .expand('User')\n        .orderBy('CompletionDate', false);\n\n      if (userId) {\n        query = query.filter(`User/Email eq '${userId}'`);\n      }\n\n      const items = await query();\n\n      return items.map(item => ({\n        ...item,\n        Responses: this.parseJSON(item.Responses, []),\n        CompletionDate: item.CompletionDate ? new Date(item.CompletionDate).toISOString() : ''\n      }));\n    } catch (error) {\n      console.error('Error loading quiz results:', error);\n      throw error;\n    }\n  }\n\n  public async saveQuizResult(result: Partial<QuizResultsItem>): Promise<QuizResultsItem> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      \n      const resultData = {\n        Title: result.Title || `${result.QuizType} - ${currentUser.title} - ${new Date().toLocaleDateString('fr-FR')}`,\n        UserId: currentUser.id,\n        QuizType: result.QuizType,\n        Responses: JSON.stringify(result.Responses),\n        Score: result.Score || 0,\n        CompletionDate: result.CompletionDate || new Date().toISOString(),\n        Duration: result.Duration,\n        Status: result.Status\n      };\n\n      const response = await this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .add(resultData);\n\n      return await this.getQuizResultById(response.data.Id);\n    } catch (error) {\n      console.error('Error saving quiz result:', error);\n      throw error;\n    }\n  }\n\n  public async updateQuizResult(id: number, result: Partial<QuizResultsItem>): Promise<void> {\n    try {\n      const resultData = {\n        ...(result.QuizType && { QuizType: result.QuizType }),\n        ...(result.Responses && { Responses: JSON.stringify(result.Responses) }),\n        ...(result.Score !== undefined && { Score: result.Score }),\n        ...(result.CompletionDate && { CompletionDate: result.CompletionDate }),\n        ...(result.Duration !== undefined && { Duration: result.Duration }),\n        ...(result.Status && { Status: result.Status })\n      };\n\n      await this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .getById(id)\n        .update(resultData);\n    } catch (error) {\n      console.error('Error updating quiz result:', error);\n      throw error;\n    }\n  }\n\n  public async deleteQuizResult(id: number): Promise<void> {\n    try {\n      await this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .getById(id)\n        .delete();\n    } catch (error) {\n      console.error('Error deleting quiz result:', error);\n      throw error;\n    }\n  }\n\n  private async getQuizResultById(id: number): Promise<QuizResultsItem> {\n    try {\n      const item = await this.sp.web.lists\n        .getByTitle('Quiz_Results')\n        .items\n        .getById(id)\n        .select('Id', 'Title', 'User/Title', 'User/Email', 'QuizType', 'Responses', 'Score', 'CompletionDate', 'Duration', 'Status', 'Created', 'Modified')\n        .expand('User')();\n\n      return {\n        ...item,\n        Responses: this.parseJSON(item.Responses, []),\n        CompletionDate: item.CompletionDate ? new Date(item.CompletionDate).toISOString() : ''\n      };\n    } catch (error) {\n      console.error('Error getting quiz result by id:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * User Progress Methods\n   */\n  public async getUserProgress(userId?: string): Promise<UserProgressItem[]> {\n    try {\n      let query = this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .select('Id', 'Title', 'User/Title', 'User/Email', 'CompetenceArea', 'CurrentLevel', 'TargetLevel', 'LastAssessment', 'NextAssessment', 'Progress', 'Created', 'Modified')\n        .expand('User')\n        .orderBy('CompetenceArea', true);\n\n      if (userId) {\n        query = query.filter(`User/Email eq '${userId}'`);\n      }\n\n      const items = await query();\n\n      return items.map(item => ({\n        ...item,\n        LastAssessment: item.LastAssessment ? new Date(item.LastAssessment).toISOString() : '',\n        NextAssessment: item.NextAssessment ? new Date(item.NextAssessment).toISOString() : ''\n      }));\n    } catch (error) {\n      console.error('Error loading user progress:', error);\n      throw error;\n    }\n  }\n\n  public async saveUserProgress(progress: Partial<UserProgressItem>): Promise<UserProgressItem> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      \n      const progressData = {\n        Title: progress.Title || `${progress.CompetenceArea} - ${currentUser.title}`,\n        UserId: currentUser.id,\n        CompetenceArea: progress.CompetenceArea,\n        CurrentLevel: progress.CurrentLevel,\n        TargetLevel: progress.TargetLevel,\n        LastAssessment: progress.LastAssessment,\n        NextAssessment: progress.NextAssessment,\n        Progress: progress.Progress\n      };\n\n      const response = await this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .add(progressData);\n\n      return await this.getUserProgressById(response.data.Id);\n    } catch (error) {\n      console.error('Error saving user progress:', error);\n      throw error;\n    }\n  }\n\n  public async updateUserProgress(id: number, progress: Partial<UserProgressItem>): Promise<void> {\n    try {\n      const progressData = {\n        ...(progress.CompetenceArea && { CompetenceArea: progress.CompetenceArea }),\n        ...(progress.CurrentLevel !== undefined && { CurrentLevel: progress.CurrentLevel }),\n        ...(progress.TargetLevel !== undefined && { TargetLevel: progress.TargetLevel }),\n        ...(progress.LastAssessment && { LastAssessment: progress.LastAssessment }),\n        ...(progress.NextAssessment && { NextAssessment: progress.NextAssessment }),\n        ...(progress.Progress !== undefined && { Progress: progress.Progress })\n      };\n\n      await this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .getById(id)\n        .update(progressData);\n    } catch (error) {\n      console.error('Error updating user progress:', error);\n      throw error;\n    }\n  }\n\n  public async deleteUserProgress(id: number): Promise<void> {\n    try {\n      await this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .getById(id)\n        .delete();\n    } catch (error) {\n      console.error('Error deleting user progress:', error);\n      throw error;\n    }\n  }\n\n  private async getUserProgressById(id: number): Promise<UserProgressItem> {\n    try {\n      const item = await this.sp.web.lists\n        .getByTitle('User_Progress')\n        .items\n        .getById(id)\n        .select('Id', 'Title', 'User/Title', 'User/Email', 'CompetenceArea', 'CurrentLevel', 'TargetLevel', 'LastAssessment', 'NextAssessment', 'Progress', 'Created', 'Modified')\n        .expand('User')();\n\n      return {\n        ...item,\n        LastAssessment: item.LastAssessment ? new Date(item.LastAssessment).toISOString() : '',\n        NextAssessment: item.NextAssessment ? new Date(item.NextAssessment).toISOString() : ''\n      };\n    } catch (error) {\n      console.error('Error getting user progress by id:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Utility Methods\n   */\n  public async checkListExists(listTitle: string): Promise<boolean> {\n    try {\n      await this.sp.web.lists.getByTitle(listTitle)();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  public async getListItems<T = SharePointListItem>(\n    listTitle: string,\n    select?: string[],\n    filter?: string,\n    orderBy?: string,\n    top?: number\n  ): Promise<T[]> {\n    try {\n      let query = this.sp.web.lists.getByTitle(listTitle).items;\n\n      if (select) {\n        query = query.select(...select);\n      }\n\n      if (filter) {\n        query = query.filter(filter);\n      }\n\n      if (orderBy) {\n        query = query.orderBy(orderBy, true);\n      }\n\n      if (top) {\n        query = query.top(top);\n      }\n\n      return await query();\n    } catch (error) {\n      console.error(`Error getting items from list ${listTitle}:`, error);\n      throw error;\n    }\n  }\n\n  public async bulkUpdateItems<T = any>(\n    listTitle: string,\n    updates: Array<{ id: number; data: Partial<T> }>\n  ): Promise<void> {\n    try {\n      const batch = this.sp.web.createBatch();\n      const list = this.sp.web.lists.getByTitle(listTitle);\n\n      updates.forEach(update => {\n        list.items.getById(update.id).inBatch(batch).update(update.data);\n      });\n\n      await batch.execute();\n    } catch (error) {\n      console.error(`Error bulk updating items in list ${listTitle}:`, error);\n      throw error;\n    }\n  }\n\n  public async exportToExcel(\n    listTitle: string,\n    fileName?: string\n  ): Promise<void> {\n    try {\n      const items = await this.getListItems(listTitle);\n      const data = items.map(item => {\n        // Remove complex objects and keep only simple properties\n        const simpleItem: any = {};\n        for (const key in item) {\n          if (typeof item[key] !== 'object' || item[key] === null) {\n            simpleItem[key] = item[key];\n          }\n        }\n        return simpleItem;\n      });\n\n      // Convert to CSV\n      if (data.length === 0) return;\n\n      const headers = Object.keys(data[0]);\n      const csvContent = [\n        headers.join(','),\n        ...data.map(row => headers.map(header => \n          JSON.stringify(row[header] || '')\n        ).join(','))\n      ].join('\\n');\n\n      // Download file\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', fileName || `${listTitle}-export.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error exporting to Excel:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Helper Methods\n   */\n  private parseJSON(jsonString: string, defaultValue: any = null): any {\n    try {\n      return jsonString ? JSON.parse(jsonString) : defaultValue;\n    } catch (error) {\n      console.warn('Error parsing JSON:', error);\n      return defaultValue;\n    }\n  }\n\n  private formatDate(date: Date | string): string {\n    const d = new Date(date);\n    return d.toISOString();\n  }\n\n  /**\n   * Cache Management\n   */\n  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();\n\n  private async getCachedData<T>(\n    key: string,\n    fetcher: () => Promise<T>,\n    ttl: number = 300000 // 5 minutes default\n  ): Promise<T> {\n    const cached = this.cache.get(key);\n    const now = Date.now();\n\n    if (cached && (now - cached.timestamp) < cached.ttl) {\n      return cached.data;\n    }\n\n    const data = await fetcher();\n    this.cache.set(key, { data, timestamp: now, ttl });\n    return data;\n  }\n\n  public clearCache(): void {\n    this.cache.clear();\n  }\n\n  public removeCacheEntry(key: string): void {\n    this.cache.delete(key);\n  }\n\n  /**\n   * Error Handling and Retry Logic\n   */\n  private async retryOperation<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<T> {\n    let lastError: Error;\n\n    for (let i = 0; i <= maxRetries; i++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error as Error;\n        \n        if (i === maxRetries) {\n          throw lastError;\n        }\n\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));\n      }\n    }\n\n    throw lastError!;\n  }\n}"]}