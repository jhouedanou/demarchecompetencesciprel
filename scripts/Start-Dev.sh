#!/bin/bash

# Script de lancement automatique de l'environnement de d√©veloppement
# D√©marche Comp√©tence CIPREL - SPFx + React + Docker

set -e  # Arr√™ter le script en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages avec couleur
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
}

# Banni√®re de d√©marrage
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    üöÄ D√âMARCHE COMP√âTENCE CIPREL üöÄ                         ‚ïë"
echo "‚ïë                      Environnement de D√©veloppement                          ‚ïë"
echo "‚ïë                         SPFx + React + Docker                              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# V√©rification des pr√©requis
log_step "V√©rification des pr√©requis..."

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√©. Veuillez installer Docker Desktop."
    exit 1
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n'est pas install√©. Veuillez installer Docker Compose."
    exit 1
fi

# V√©rifier que Docker est en cours d'ex√©cution
if ! docker info &> /dev/null; then
    log_error "Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker Desktop."
    exit 1
fi

log_success "Pr√©requis valid√©s ‚úì"

# Nettoyer les conteneurs existants
log_step "Nettoyage des conteneurs existants..."
docker-compose down --remove-orphans &> /dev/null || true
log_success "Conteneurs nettoy√©s ‚úì"

# Construire et d√©marrer les conteneurs
log_step "Construction et d√©marrage des conteneurs Docker..."
log_info "Ceci peut prendre quelques minutes lors du premier lancement..."

if docker-compose up -d --build; then
    log_success "Conteneurs d√©marr√©s avec succ√®s ‚úì"
else
    log_error "Erreur lors du d√©marrage des conteneurs"
    exit 1
fi

# Attendre que les conteneurs soient pr√™ts
log_step "Attente de la disponibilit√© des services..."

# Fonction pour attendre qu'un port soit disponible
wait_for_port() {
    local host=$1
    local port=$2
    local service=$3
    local timeout=60
    local count=0

    while ! nc -z $host $port &> /dev/null; do
        if [ $count -ge $timeout ]; then
            log_error "Timeout: $service n'est pas disponible apr√®s ${timeout}s"
            return 1
        fi
        sleep 1
        count=$((count + 1))
        if [ $((count % 10)) -eq 0 ]; then
            log_info "Attente de $service... (${count}s)"
        fi
    done
    
    log_success "$service est disponible ‚úì"
}

# Attendre le workbench nginx
wait_for_port localhost 8080 "Workbench (nginx)"

# V√©rifier et installer les d√©pendances SPFx
log_step "V√©rification et installation des d√©pendances SPFx..."
if docker-compose exec -T spfx-dev npm list gulp &> /dev/null; then
    log_success "D√©pendances d√©j√† install√©es ‚úì"
else
    log_info "Installation des d√©pendances manquantes..."
    if docker-compose exec -T spfx-dev npm install; then
        log_success "D√©pendances install√©es ‚úì"
    else
        log_error "Erreur lors de l'installation des d√©pendances"
        exit 1
    fi
fi

# G√©n√©rer le certificat de d√©veloppement SPFx
log_step "G√©n√©ration du certificat de d√©veloppement SPFx..."
if docker-compose exec -T spfx-dev npx gulp trust-dev-cert &> /dev/null; then
    log_success "Certificat de d√©veloppement g√©n√©r√© ‚úì"
else
    log_warning "Le certificat pourrait d√©j√† exister ou √™tre g√©n√©r√© automatiquement"
fi

# Effectuer un build initial pour s'assurer que tout compile
log_step "Build initial de l'application SPFx..."
log_info "Ceci peut prendre quelques minutes lors du premier build..."
if docker-compose exec -T spfx-dev npx gulp bundle --no-color; then
    log_success "Build initial r√©ussi ‚úì"
else
    log_warning "Le build initial a √©chou√©, mais le serveur de d√©veloppement va essayer de corriger"
fi

# Attendre que SPFx soit pr√™t et v√©rifier qu'il fonctionne
log_step "D√©marrage et v√©rification du serveur de d√©veloppement SPFx..."
sleep 15  # Laisser le temps √† SPFx de compiler

# Red√©marrer le serveur de d√©veloppement pour s'assurer qu'il utilise les derniers builds
log_step "Red√©marrage du serveur de d√©veloppement SPFx..."
docker-compose restart spfx-dev
sleep 10

# V√©rifier que le serveur SPFx r√©pond
log_info "V√©rification que le serveur SPFx r√©pond..."
for i in {1..12}; do
    if curl -s http://localhost:4321 &> /dev/null; then
        log_success "Serveur SPFx op√©rationnel ‚úì"
        break
    elif [ $i -eq 12 ]; then
        log_warning "Le serveur SPFx met du temps √† d√©marrer, v√©rifiez les logs avec: docker-compose logs spfx-dev"
    else
        log_info "Attente du serveur SPFx... (tentative $i/12)"
        sleep 5
    fi
done

# V√©rifier l'√©tat des conteneurs
log_step "V√©rification de l'√©tat des services..."
if docker-compose ps | grep -q "Up"; then
    log_success "Tous les services sont op√©rationnels ‚úì"
else
    log_warning "Certains services pourraient encore d√©marrer"
fi

# Afficher les informations de connexion
echo ""
echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${GREEN}‚ïë                           üéâ ENVIRONNEMENT PR√äT ! üéâ                        ‚ïë${NC}"
echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

echo -e "${BLUE}üìã Services disponibles :${NC}"
echo ""
echo -e "  üåê ${YELLOW}Workbench Local${NC}     : http://localhost:8080"
echo -e "  üîß ${YELLOW}Serveur SPFx${NC}        : http://localhost:4321"
echo -e "  üìä ${YELLOW}LiveReload${NC}          : http://localhost:35729"
echo ""

echo -e "${BLUE}üõ†Ô∏è  Commandes utiles :${NC}"
echo ""
echo -e "  üìã Voir les logs        : ${YELLOW}docker-compose logs -f${NC}"
echo -e "  üìã Logs SPFx seulement  : ${YELLOW}docker-compose logs -f spfx-dev${NC}"
echo -e "  üîÑ Red√©marrer SPFx      : ${YELLOW}docker-compose restart spfx-dev${NC}"
echo -e "  üî® Build manuel         : ${YELLOW}docker-compose exec spfx-dev npx gulp bundle${NC}"
echo -e "  üöÄ Serveur manuel       : ${YELLOW}docker-compose exec spfx-dev npx gulp serve${NC}"
echo -e "  üõë Arr√™ter tout         : ${YELLOW}docker-compose down${NC}"
echo -e "  üßπ Nettoyer tout        : ${YELLOW}docker-compose down --volumes --remove-orphans${NC}"
echo ""

echo -e "${BLUE}üîó D√©veloppement SharePoint :${NC}"
echo ""
echo -e "  Pour tester dans SharePoint, utilisez cette URL dans votre workbench :"
echo -e "  ${YELLOW}?debugManifestsFile=http://localhost:4321/temp/manifests.js${NC}"
echo ""

# Proposer d'ouvrir automatiquement les URLs
read -p "Voulez-vous ouvrir automatiquement le workbench dans votre navigateur ? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Ouverture du workbench..."
    
    # D√©tection de l'OS pour la commande d'ouverture
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        open http://localhost:8080
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        xdg-open http://localhost:8080 &> /dev/null &
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        # Windows
        start http://localhost:8080
    else
        log_info "Veuillez ouvrir manuellement : http://localhost:8080"
    fi
fi

# Afficher les logs en continu
echo ""
read -p "Voulez-vous suivre les logs en temps r√©el ? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    log_info "Affichage des logs en temps r√©el (Ctrl+C pour arr√™ter)..."
    echo ""
    docker-compose logs -f
fi

log_success "Script de lancement termin√© !"
