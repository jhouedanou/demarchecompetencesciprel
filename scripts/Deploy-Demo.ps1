# Script de D√©ploiement Rapide pour D√©monstration Client
# D√©marche Comp√©tence CIPREL

param(
    [Parameter(Mandatory=$true)]
    [string]$TenantUrl,
    
    [Parameter(Mandatory=$false)]
    [string]$SiteName = "demo-competences",
    
    [Parameter(Mandatory=$false)]
    [string]$AdminEmail,
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipSiteCreation
)

$ErrorActionPreference = "Stop"

Write-Host "üöÄ D√©ploiement Rapide - D√©marche Comp√©tence CIPREL" -ForegroundColor Green
Write-Host "===============================================" -ForegroundColor Green

# Variables
$siteUrl = "$TenantUrl/sites/$SiteName"
$appCatalogUrl = "$TenantUrl-admin.sharepoint.com/sites/appcatalog"
$packagePath = ".\sharepoint\solution\demarche-competence-ciprel.sppkg"

try {
    # V√©rification des pr√©requis
    Write-Host "üîç V√©rification des pr√©requis..." -ForegroundColor Yellow
    
    if (-not (Get-Module -ListAvailable -Name PnP.PowerShell)) {
        Write-Host "Installation du module PnP.PowerShell..." -ForegroundColor Yellow
        Install-Module -Name PnP.PowerShell -Force -AllowClobber
    }
    
    if (-not (Test-Path $packagePath)) {
        Write-Host "‚ùå Package SPFx non trouv√©. Ex√©cution du build..." -ForegroundColor Red
        
        # Build du package
        Write-Host "üî® Build du package SPFx..." -ForegroundColor Yellow
        npm run clean
        npm run package-solution
        
        if (-not (Test-Path $packagePath)) {
            throw "√âchec du build du package SPFx"
        }
    }

    # √âtape 1: Cr√©ation du site de d√©monstration
    if (-not $SkipSiteCreation) {
        Write-Host "üèóÔ∏è √âtape 1/6: Cr√©ation du site de d√©monstration..." -ForegroundColor Cyan
        
        Connect-PnPOnline -Url $TenantUrl -Interactive
        
        $existingSite = Get-PnPTenantSite -Url $siteUrl -ErrorAction SilentlyContinue
        if (-not $existingSite) {
            Write-Host "Cr√©ation du site: $siteUrl" -ForegroundColor Yellow
            New-PnPSite -Type TeamSite -Title "D√©mo D√©marche Comp√©tence CIPREL" -Alias $SiteName -Description "Site de d√©monstration pour l'application de d√©marche comp√©tence"
            
            # Attendre que le site soit pr√™t
            do {
                Start-Sleep -Seconds 5
                $siteReady = Get-PnPTenantSite -Url $siteUrl -ErrorAction SilentlyContinue
                Write-Host "Attente de la cr√©ation du site..." -ForegroundColor Yellow
            } while (-not $siteReady)
        } else {
            Write-Host "Site existant trouv√©: $siteUrl" -ForegroundColor Green
        }
    }

    # √âtape 2: Connexion au site et cr√©ation des listes
    Write-Host "üìã √âtape 2/6: Cr√©ation des listes SharePoint..." -ForegroundColor Cyan
    
    Connect-PnPOnline -Url $siteUrl -Interactive
    
    # Listes √† cr√©er
    $lists = @(
        @{
            Name = "Quiz_Introduction"
            Description = "Questions du quiz d'introduction √† la d√©marche comp√©tence"
            Fields = @(
                @{Name="Question"; Type="Note"; DisplayName="Question"},
                @{Name="Options"; Type="Note"; DisplayName="Options"},
                @{Name="CorrectAnswer"; Type="Text"; DisplayName="Bonne R√©ponse"},
                @{Name="Category"; Type="Choice"; DisplayName="Cat√©gorie"; Choices=@("D√©finition", "Responsabilit√©", "Comp√©tences", "√âtapes")},
                @{Name="Points"; Type="Number"; DisplayName="Points"},
                @{Name="Order"; Type="Number"; DisplayName="Ordre"}
            )
        },
        @{
            Name = "Quiz_Sondage"
            Description = "Questions du sondage de satisfaction"
            Fields = @(
                @{Name="Question"; Type="Note"; DisplayName="Question"},
                @{Name="QuestionType"; Type="Choice"; DisplayName="Type de Question"; Choices=@("Multiple Choice", "Text", "Rating")},
                @{Name="Options"; Type="Note"; DisplayName="Options"},
                @{Name="Required"; Type="Boolean"; DisplayName="Obligatoire"},
                @{Name="Order"; Type="Number"; DisplayName="Ordre"}
            )
        },
        @{
            Name = "Quiz_Results"
            Description = "R√©sultats des quiz et sondages"
            Fields = @(
                @{Name="User"; Type="User"; DisplayName="Utilisateur"},
                @{Name="QuizType"; Type="Choice"; DisplayName="Type de Quiz"; Choices=@("Introduction", "Sondage")},
                @{Name="Responses"; Type="Note"; DisplayName="R√©ponses"},
                @{Name="Score"; Type="Number"; DisplayName="Score"},
                @{Name="CompletionDate"; Type="DateTime"; DisplayName="Date de Completion"},
                @{Name="Duration"; Type="Number"; DisplayName="Dur√©e"},
                @{Name="Status"; Type="Choice"; DisplayName="Statut"; Choices=@("Completed", "In Progress", "Abandoned")}
            )
        },
        @{
            Name = "User_Progress"
            Description = "Suivi des progr√®s des utilisateurs"
            Fields = @(
                @{Name="User"; Type="User"; DisplayName="Utilisateur"},
                @{Name="CompetenceArea"; Type="Choice"; DisplayName="Domaine de Comp√©tence"; Choices=@("Leadership", "Communication", "Technique", "Management", "Innovation", "Qualit√©")},
                @{Name="CurrentLevel"; Type="Number"; DisplayName="Niveau Actuel"},
                @{Name="TargetLevel"; Type="Number"; DisplayName="Niveau Cible"},
                @{Name="LastAssessment"; Type="DateTime"; DisplayName="Derni√®re √âvaluation"},
                @{Name="NextAssessment"; Type="DateTime"; DisplayName="Prochaine √âvaluation"},
                @{Name="Progress"; Type="Number"; DisplayName="Progr√®s"}
            )
        }
    )

    foreach ($listConfig in $lists) {
        $existingList = Get-PnPList -Identity $listConfig.Name -ErrorAction SilentlyContinue
        if (-not $existingList) {
            Write-Host "Cr√©ation de la liste: $($listConfig.Name)" -ForegroundColor Yellow
            $list = New-PnPList -Title $listConfig.Name -Template GenericList -Description $listConfig.Description
            
            # Ajouter les champs
            foreach ($field in $listConfig.Fields) {
                try {
                    switch ($field.Type) {
                        "Note" { Add-PnPField -List $listConfig.Name -DisplayName $field.DisplayName -InternalName $field.Name -Type $field.Type -AddToDefaultView }
                        "Text" { Add-PnPField -List $listConfig.Name -DisplayName $field.DisplayName -InternalName $field.Name -Type $field.Type -AddToDefaultView }
                        "Number" { Add-PnPField -List $listConfig.Name -DisplayName $field.DisplayName -InternalName $field.Name -Type $field.Type -AddToDefaultView }
                        "Boolean" { Add-PnPField -List $listConfig.Name -DisplayName $field.DisplayName -InternalName $field.Name -Type $field.Type -AddToDefaultView }
                        "DateTime" { Add-PnPField -List $listConfig.Name -DisplayName $field.DisplayName -InternalName $field.Name -Type $field.Type -AddToDefaultView }
                        "User" { Add-PnPField -List $listConfig.Name -DisplayName $field.DisplayName -InternalName $field.Name -Type $field.Type -AddToDefaultView }
                        "Choice" { 
                            $choicesXml = "<Field Type='Choice' DisplayName='$($field.DisplayName)' Name='$($field.Name)'><CHOICES>"
                            foreach ($choice in $field.Choices) {
                                $choicesXml += "<CHOICE>$choice</CHOICE>"
                            }
                            $choicesXml += "</CHOICES></Field>"
                            Add-PnPFieldFromXml -List $listConfig.Name -FieldXml $choicesXml -AddToDefaultView
                        }
                    }
                } catch {
                    Write-Warning "Champ $($field.Name) d√©j√† existant ou erreur: $_"
                }
            }
        } else {
            Write-Host "Liste existante: $($listConfig.Name)" -ForegroundColor Green
        }
    }

    # √âtape 3: Donn√©es de d√©monstration
    Write-Host "üíæ √âtape 3/6: Ajout des donn√©es de d√©monstration..." -ForegroundColor Cyan
    
    # Questions quiz introduction
    $introQuestions = @(
        @{
            Title = "Question 1"
            Question = "Qu'est-ce que la d√©marche comp√©tence chez CIPREL ?"
            Options = '["Un moyen de retenir les talents", "Un outil de sanction", "Un processus de licenciement", "Une m√©thode de recrutement"]'
            CorrectAnswer = "Un moyen de retenir les talents"
            Category = "D√©finition"
            Points = 1
            Order = 1
        },
        @{
            Title = "Question 2"
            Question = "Qui est responsable de la mise en ≈ìuvre de la d√©marche comp√©tence ?"
            Options = '["Les RH uniquement", "Le manager et l\'employ√©", "La direction g√©n√©rale", "Les syndicats"]'
            CorrectAnswer = "Le manager et l'employ√©"
            Category = "Responsabilit√©"
            Points = 1
            Order = 2
        },
        @{
            Title = "Question 3"
            Question = "Quelles sont les √©tapes principales de la d√©marche comp√©tence ?"
            Options = '["√âvaluation, Formation, Sanction", "Identification, √âvaluation, D√©veloppement, Validation", "Recrutement, Formation, Promotion", "Observation, Notation, Mutation"]'
            CorrectAnswer = "Identification, √âvaluation, D√©veloppement, Validation"
            Category = "√âtapes"
            Points = 2
            Order = 3
        }
    )

    foreach ($question in $introQuestions) {
        $existingItem = Get-PnPListItem -List "Quiz_Introduction" -Query "<View><Query><Where><Eq><FieldRef Name='Title'/><Value Type='Text'>$($question.Title)</Value></Eq></Where></Query></View>" -ErrorAction SilentlyContinue
        if (-not $existingItem) {
            Add-PnPListItem -List "Quiz_Introduction" -Values $question | Out-Null
            Write-Host "Question ajout√©e: $($question.Title)" -ForegroundColor Green
        }
    }

    # Questions sondage
    $sondageQuestions = @(
        @{
            Title = "Satisfaction 1"
            Question = "Comment √©valuez-vous la clart√© des informations pr√©sent√©es ?"
            QuestionType = "Rating"
            Options = '["1", "2", "3", "4", "5"]'
            Required = $true
            Order = 1
        },
        @{
            Title = "Satisfaction 2"
            Question = "Cette formation r√©pond-elle √† vos attentes ?"
            QuestionType = "Multiple Choice"
            Options = '["Compl√®tement", "Partiellement", "Pas du tout", "Je ne sais pas"]'
            Required = $true
            Order = 2
        }
    )

    foreach ($question in $sondageQuestions) {
        $existingItem = Get-PnPListItem -List "Quiz_Sondage" -Query "<View><Query><Where><Eq><FieldRef Name='Title'/><Value Type='Text'>$($question.Title)</Value></Eq></Where></Query></View>" -ErrorAction SilentlyContinue
        if (-not $existingItem) {
            Add-PnPListItem -List "Quiz_Sondage" -Values $question | Out-Null
            Write-Host "Question sondage ajout√©e: $($question.Title)" -ForegroundColor Green
        }
    }

    # √âtape 4: D√©ploiement de l'application
    Write-Host "üì¶ √âtape 4/6: D√©ploiement de l'application SPFx..." -ForegroundColor Cyan
    
    # Connexion √† l'App Catalog
    Connect-PnPOnline -Url $appCatalogUrl -Interactive
    
    # Upload du package
    Write-Host "Upload du package vers l'App Catalog..." -ForegroundColor Yellow
    $app = Add-PnPApp -Path $packagePath -Overwrite
    
    # D√©ploiement tenant-wide
    Write-Host "D√©ploiement tenant-wide..." -ForegroundColor Yellow
    Publish-PnPApp -Identity $app.Id -SkipFeatureDeployment
    
    # Retour au site de d√©mo pour installation
    Connect-PnPOnline -Url $siteUrl -Interactive
    
    # Installation de l'app
    Write-Host "Installation de l'app sur le site de d√©mo..." -ForegroundColor Yellow
    Install-PnPApp -Identity "demarche-competence-ciprel"

    # √âtape 5: Cr√©ation de la page de d√©monstration
    Write-Host "üìÑ √âtape 5/6: Cr√©ation de la page de d√©monstration..." -ForegroundColor Cyan
    
    $pageName = "Demo-Competences"
    $existingPage = Get-PnPClientSidePage -Identity $pageName -ErrorAction SilentlyContinue
    if (-not $existingPage) {
        Write-Host "Cr√©ation de la page de d√©mo..." -ForegroundColor Yellow
        $page = Add-PnPClientSidePage -Name $pageName -LayoutType Article -Title "D√©monstration D√©marche Comp√©tence CIPREL"
        
        # Ajout du WebPart
        Add-PnPClientSideWebPart -Page $page -DefaultWebPartType "DemarcheCompetence" -Section 1 -Column 1
        
        # Publication de la page
        Set-PnPClientSidePage -Identity $page -Publish
        
        Write-Host "Page de d√©mo cr√©√©e et publi√©e" -ForegroundColor Green
    } else {
        Write-Host "Page de d√©mo existante trouv√©e" -ForegroundColor Green
    }

    # √âtape 6: Configuration des permissions
    Write-Host "üîí √âtape 6/6: Configuration des permissions..." -ForegroundColor Cyan
    
    $lists = @("Quiz_Introduction", "Quiz_Sondage", "Quiz_Results", "User_Progress")
    foreach ($listName in $lists) {
        try {
            # Permissions lecture pour tous les membres du site
            Set-PnPListPermission -Identity $listName -Group "Membres" -AddRole "Lecture" -ErrorAction SilentlyContinue
            
            # Permissions contribution pour Quiz_Results et User_Progress
            if ($listName -in @("Quiz_Results", "User_Progress")) {
                Set-PnPListPermission -Identity $listName -Group "Membres" -AddRole "Contribution" -ErrorAction SilentlyContinue
            }
            
            Write-Host "Permissions configur√©es pour: $listName" -ForegroundColor Green
        } catch {
            Write-Warning "Erreur de configuration des permissions pour $listName : $_"
        }
    }

    # R√©sultats du d√©ploiement
    Write-Host ""
    Write-Host "‚úÖ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !" -ForegroundColor Green
    Write-Host "=====================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "üåê Site de d√©monstration: $siteUrl" -ForegroundColor Cyan
    Write-Host "üìÑ Page de d√©mo: $siteUrl/SitePages/$pageName.aspx" -ForegroundColor Cyan
    Write-Host "‚öôÔ∏è Workbench: $siteUrl/_layouts/15/workbench.aspx" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üìã Listes cr√©√©es:" -ForegroundColor Yellow
    Write-Host "   - Quiz_Introduction (avec 3 questions de d√©mo)" -ForegroundColor White
    Write-Host "   - Quiz_Sondage (avec 2 questions de d√©mo)" -ForegroundColor White
    Write-Host "   - Quiz_Results (vide, pr√™t pour les r√©sultats)" -ForegroundColor White
    Write-Host "   - User_Progress (vide, pr√™t pour le suivi)" -ForegroundColor White
    Write-Host ""
    Write-Host "üé® Th√®me CIPREL appliqu√© avec palette de couleurs:" -ForegroundColor Yellow
    Write-Host "   - Tangerine (#ED7E05) - Couleur primaire" -ForegroundColor White
    Write-Host "   - Forest Green (#0D9330) - Couleur secondaire" -ForegroundColor White
    Write-Host "   - Isabelline (#F3EEE7) - Arri√®re-plans" -ForegroundColor White
    Write-Host "   - Seasalt (#F6F7F8) - Surfaces" -ForegroundColor White
    Write-Host ""
    Write-Host "üöÄ L'application est pr√™te pour la d√©monstration !" -ForegroundColor Green
    Write-Host ""

} catch {
    Write-Host ""
    Write-Host "‚ùå ERREUR LORS DU D√âPLOIEMENT" -ForegroundColor Red
    Write-Host "=============================" -ForegroundColor Red
    Write-Host "Erreur: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host ""
    Write-Host "üîß Solutions possibles:" -ForegroundColor Yellow
    Write-Host "1. V√©rifiez vos permissions d'administrateur SharePoint" -ForegroundColor White
    Write-Host "2. Assurez-vous que l'App Catalog est accessible" -ForegroundColor White
    Write-Host "3. Relancez le script avec des param√®tres diff√©rents" -ForegroundColor White
    Write-Host "4. Contactez le support: support@ciprel.ci" -ForegroundColor White
    
    exit 1
}

Write-Host "Fin du script de d√©ploiement rapide" -ForegroundColor Gray