#!/bin/bash

# Script de r√©paration Docker pour D√©marche Comp√©tence CIPREL
# R√©sout les probl√®mes de permissions et de build Docker

echo "üîß Script de R√©paration Docker - D√©marche Comp√©tence CIPREL"
echo "========================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage color√©
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# √âtape 1: Nettoyage Docker
print_status "√âtape 1: Nettoyage des containers et images existants..."

# Arr√™t et suppression des containers existants
docker-compose down 2>/dev/null || true
docker-compose -f docker-compose.simple.yml down 2>/dev/null || true

# Suppression des images existantes
docker rmi demarche-competence-spfx 2>/dev/null || true
docker rmi demarche-competence-spfx-simple 2>/dev/null || true

# Nettoyage des volumes
docker volume prune -f

print_success "Nettoyage Docker termin√©"

# √âtape 2: V√©rification des pr√©requis
print_status "√âtape 2: V√©rification des pr√©requis..."

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©"
    exit 1
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n'est pas install√©"
    exit 1
fi

# V√©rifier que Docker fonctionne
if ! docker info &> /dev/null; then
    print_error "Docker daemon n'est pas d√©marr√©"
    exit 1
fi

print_success "Pr√©requis valid√©s"

# √âtape 3: Choix de la configuration Docker
print_status "√âtape 3: S√©lection de la configuration Docker..."

echo "Choisissez la configuration Docker :"
echo "1) Configuration standard (Dockerfile)"
echo "2) Configuration simple (Dockerfile.simple) - Recommand√© si erreurs"
echo "3) Configuration manuelle"

read -p "Votre choix (1-3): " choice

case $choice in
    1)
        DOCKERFILE="Dockerfile"
        COMPOSE_FILE="docker-compose.yml"
        print_status "Configuration standard s√©lectionn√©e"
        ;;
    2)
        DOCKERFILE="Dockerfile.simple"
        COMPOSE_FILE="docker-compose.simple.yml"
        print_status "Configuration simple s√©lectionn√©e"
        ;;
    3)
        print_status "Configuration manuelle - construction sans Docker"
        npm install
        npm run serve
        exit 0
        ;;
    *)
        print_warning "Choix invalide, utilisation de la configuration simple"
        DOCKERFILE="Dockerfile.simple"
        COMPOSE_FILE="docker-compose.simple.yml"
        ;;
esac

# √âtape 4: Construction de l'image Docker
print_status "√âtape 4: Construction de l'image Docker..."

# Build avec gestion d'erreurs
if docker-compose -f $COMPOSE_FILE build --no-cache; then
    print_success "Image Docker construite avec succ√®s"
else
    print_error "√âchec de la construction Docker"
    
    # Tentative de diagnostic
    print_status "Diagnostic des erreurs..."
    
    # V√©rifier l'espace disque
    df_output=$(df -h /)
    print_status "Espace disque disponible:"
    echo "$df_output"
    
    # V√©rifier les permissions
    if [[ "$OSTYPE" == "darwin"* ]]; then
        print_status "Syst√®me macOS d√©tect√©"
        print_warning "V√©rifiez que Docker Desktop a acc√®s au r√©pertoire du projet"
    fi
    
    # Proposer des solutions
    echo ""
    print_warning "Solutions possibles :"
    echo "1. Red√©marrer Docker Desktop"
    echo "2. Lib√©rer de l'espace disque"
    echo "3. V√©rifier les permissions du r√©pertoire"
    echo "4. Utiliser la configuration manuelle (option 3)"
    
    exit 1
fi

# √âtape 5: D√©marrage des services
print_status "√âtape 5: D√©marrage des services Docker..."

if docker-compose -f $COMPOSE_FILE up -d; then
    print_success "Services Docker d√©marr√©s avec succ√®s"
    
    # Attendre que les services soient pr√™ts
    print_status "Attente du d√©marrage des services..."
    sleep 10
    
    # V√©rifier l'√©tat des containers
    if docker-compose -f $COMPOSE_FILE ps | grep -q "Up"; then
        print_success "Application disponible !"
        echo ""
        echo "üåê URLs d'acc√®s :"
        echo "   - Workbench local: http://localhost:4321/temp/workbench.html"
        echo "   - SharePoint Workbench: https://YOUR-TENANT.sharepoint.com/_layouts/15/workbench.aspx"
        echo ""
        echo "üìã Commandes utiles :"
        echo "   - Voir les logs: docker-compose -f $COMPOSE_FILE logs -f"
        echo "   - Arr√™ter: docker-compose -f $COMPOSE_FILE down"
        echo "   - Red√©marrer: docker-compose -f $COMPOSE_FILE restart"
        echo ""
        
        # Ouvrir automatiquement le navigateur (optionnel)
        read -p "Ouvrir automatiquement le navigateur ? (y/n): " open_browser
        if [[ $open_browser =~ ^[Yy]$ ]]; then
            if command -v open &> /dev/null; then
                open "http://localhost:4321/temp/workbench.html"
            elif command -v xdg-open &> /dev/null; then
                xdg-open "http://localhost:4321/temp/workbench.html"
            else
                print_warning "Impossible d'ouvrir automatiquement le navigateur"
            fi
        fi
        
    else
        print_error "Les services n'ont pas d√©marr√© correctement"
        docker-compose -f $COMPOSE_FILE logs
        exit 1
    fi
    
else
    print_error "√âchec du d√©marrage des services Docker"
    exit 1
fi

print_success "D√©marrage Docker termin√© avec succ√®s !"

# √âtape 6: Monitoring (optionnel)
read -p "Afficher les logs en temps r√©el ? (y/n): " show_logs
if [[ $show_logs =~ ^[Yy]$ ]]; then
    print_status "Affichage des logs (Ctrl+C pour arr√™ter)..."
    docker-compose -f $COMPOSE_FILE logs -f
fi