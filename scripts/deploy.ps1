# ============================================================================
# Script de d√©ploiement automatique pour la solution D√©marche Comp√©tences CIPREL
# ============================================================================

param(
    [Parameter(Mandatory=$true)]
    [string]$SiteUrl,
    
    [Parameter(Mandatory=$false)]
    [string]$AppCatalogUrl = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipBuild = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$LoadTestData = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$Force = $false
)

# Configuration
$SolutionName = "demarchecompetencesciprel"
$PackageName = "$SolutionName.sppkg"
$PackagePath = "./solution/$PackageName"

Write-Host "============================================================================" -ForegroundColor Cyan
Write-Host "D√âPLOIEMENT SOLUTION D√âMARCHE COMP√âTENCES CIPREL" -ForegroundColor Cyan
Write-Host "============================================================================" -ForegroundColor Cyan
Write-Host "Site cible: $SiteUrl" -ForegroundColor Yellow
Write-Host "Package: $PackageName" -ForegroundColor Yellow
Write-Host ""

# √âtape 1: Build de la solution
if (-not $SkipBuild) {
    Write-Host "üî® √âtape 1: Build de la solution..." -ForegroundColor Green
    
    Write-Host "  - Nettoyage des fichiers de build pr√©c√©dents..."
    npm run clean
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Erreur lors du nettoyage"
        exit 1
    }
    
    Write-Host "  - Build et bundle de la solution..."
    npm run build
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Erreur lors du build"
        exit 1
    }
    
    Write-Host "  - Cr√©ation du bundle de production..."
    gulp bundle --ship
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Erreur lors du bundle"
        exit 1
    }
    
    Write-Host "  - Cr√©ation du package solution..."
    gulp package-solution --ship
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Erreur lors de la cr√©ation du package"
        exit 1
    }
    
    Write-Host "‚úÖ Build termin√© avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚è≠Ô∏è √âtape 1: Build ignor√© (--SkipBuild)" -ForegroundColor Yellow
}

# V√©rification de l'existence du package
if (-not (Test-Path $PackagePath)) {
    Write-Error "‚ùå Le package $PackagePath n'existe pas. Ex√©cutez le build d'abord."
    exit 1
}

# √âtape 2: Connexion √† SharePoint
Write-Host ""
Write-Host "üîó √âtape 2: Connexion √† SharePoint..." -ForegroundColor Green

try {
    Connect-PnPOnline -Url $SiteUrl -Interactive
    Write-Host "‚úÖ Connexion √©tablie" -ForegroundColor Green
} catch {
    Write-Error "‚ùå Impossible de se connecter √† SharePoint: $_"
    exit 1
}

# √âtape 3: D√©termination de l'App Catalog
Write-Host ""
Write-Host "üì¶ √âtape 3: Configuration App Catalog..." -ForegroundColor Green

$appCatalog = $AppCatalogUrl
if ([string]::IsNullOrEmpty($appCatalog)) {
    Write-Host "  - D√©tection automatique de l'App Catalog..."
    try {
        $tenant = Get-PnPTenant
        $appCatalog = $tenant.CorporateCatalogUrl
        if ([string]::IsNullOrEmpty($appCatalog)) {
            Write-Error "‚ùå Aucun App Catalog trouv√©. Veuillez sp√©cifier -AppCatalogUrl"
            exit 1
        }
    } catch {
        Write-Warning "‚ö†Ô∏è Impossible de d√©tecter l'App Catalog automatiquement"
        Write-Host "üí° Utilisation du site courant comme App Catalog"
        $appCatalog = $SiteUrl
    }
}

Write-Host "  - App Catalog: $appCatalog" -ForegroundColor Yellow

# √âtape 4: Upload et d√©ploiement du package
Write-Host ""
Write-Host "üì§ √âtape 4: Upload et d√©ploiement..." -ForegroundColor Green

try {
    Write-Host "  - Connexion √† l'App Catalog..."
    Connect-PnPOnline -Url $appCatalog -Interactive
    
    Write-Host "  - Upload du package solution..."
    $uploadResult = Add-PnPApp -Path $PackagePath -Overwrite:$Force
    
    if ($uploadResult) {
        Write-Host "  - Installation de l'application..."
        Install-PnPApp -Identity $uploadResult.Id -Wait
        
        Write-Host "‚úÖ Package d√©ploy√© avec succ√®s" -ForegroundColor Green
    } else {
        Write-Error "‚ùå Erreur lors de l'upload du package"
        exit 1
    }
} catch {
    Write-Error "‚ùå Erreur lors du d√©ploiement: $_"
    exit 1
}

# √âtape 5: Installation sur le site cible
Write-Host ""
Write-Host "üéØ √âtape 5: Installation sur le site cible..." -ForegroundColor Green

try {
    Write-Host "  - Reconnexion au site cible..."
    Connect-PnPOnline -Url $SiteUrl -Interactive
    
    Write-Host "  - Installation de l'application sur le site..."
    $apps = Get-PnPApp | Where-Object { $_.Title -like "*$SolutionName*" }
    
    if ($apps.Count -gt 0) {
        $app = $apps[0]
        Install-PnPApp -Identity $app.Id -Wait
        Write-Host "‚úÖ Application install√©e sur le site" -ForegroundColor Green
    } else {
        Write-Error "‚ùå Application non trouv√©e dans l'App Catalog"
        exit 1
    }
} catch {
    Write-Error "‚ùå Erreur lors de l'installation: $_"
    exit 1
}

# √âtape 6: V√©rification des listes
Write-Host ""
Write-Host "üìã √âtape 6: V√©rification des listes SharePoint..." -ForegroundColor Green

$requiredLists = @("CompetenceQuestions", "CompetenceResults", "SondageResponses")
$createdLists = @()

foreach ($listName in $requiredLists) {
    try {
        $list = Get-PnPList -Identity $listName -ErrorAction SilentlyContinue
        if ($list) {
            Write-Host "  ‚úÖ Liste '$listName' trouv√©e" -ForegroundColor Green
            $createdLists += $listName
        } else {
            Write-Host "  ‚ö†Ô∏è Liste '$listName' non trouv√©e - sera cr√©√©e automatiquement" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "  ‚ö†Ô∏è Liste '$listName' non trouv√©e - sera cr√©√©e automatiquement" -ForegroundColor Yellow
    }
}

# √âtape 7: Chargement des donn√©es de test (optionnel)
if ($LoadTestData) {
    Write-Host ""
    Write-Host "üß™ √âtape 7: Chargement des donn√©es de test..." -ForegroundColor Green
    
    # Questions par d√©faut
    $defaultQuestions = @(
        @{
            Title = "Question 1 - D√©finition"
            Question = "La d√©marche comp√©tence c'est :"
            OptionA = "Un processus d'√©valuation annuel des employ√©s"
            OptionB = "Un syst√®me de gestion int√©gr√©e des comp√©tences pour le d√©veloppement personnel et organisationnel"
            OptionC = "Un programme de formation obligatoire"
            CorrectAnswer = "B"
            Category = "Definition"
            Points = 10
            QuizType = "Introduction"
        },
        @{
            Title = "Question 2 - Responsabilit√©"
            Question = "La d√©marche comp√©tence est la responsabilit√© de :"
            OptionA = "Uniquement les Ressources Humaines"
            OptionB = "Seulement les managers"
            OptionC = "Tous les collaborateurs de l'organisation"
            CorrectAnswer = "C"
            Category = "Responsabilite"
            Points = 10
            QuizType = "Introduction"
        },
        @{
            Title = "Question 3 - Types de comp√©tences"
            Question = "Les comp√©tences sont essentiellement :"
            OptionA = "Uniquement techniques"
            OptionB = "Techniques, comportementales et fondamentales"
            OptionC = "Seulement li√©es √† l'exp√©rience"
            CorrectAnswer = "B"
            Category = "Competences"
            Points = 10
            QuizType = "Introduction"
        },
        @{
            Title = "Question 4 - Savoir-faire"
            Question = "Le savoir-faire c'est :"
            OptionA = "Les connaissances th√©oriques"
            OptionB = "La capacit√© √† assurer des t√¢ches techniques et/ou manag√©riales"
            OptionC = "L'exp√©rience professionnelle"
            CorrectAnswer = "B"
            Category = "Competences"
            Points = 10
            QuizType = "Introduction"
        },
        @{
            Title = "Question 5 - Savoir-√™tre"
            Question = "Le savoir-√™tre c'est :"
            OptionA = "Les capacit√©s cognitives et relationnelles"
            OptionB = "Les dipl√¥mes obtenus"
            OptionC = "Les ann√©es d'exp√©rience"
            CorrectAnswer = "A"
            Category = "Competences"
            Points = 10
            QuizType = "Introduction"
        },
        @{
            Title = "Question 6 - √âtapes"
            Question = "Quelles sont les principales √©tapes de la d√©marche comp√©tence :"
            OptionA = "√âvaluation, Formation, Certification"
            OptionB = "Auto-√©valuation, Identification des besoins, Plan de d√©veloppement, Mise en ≈ìuvre, √âvaluation et ajustement"
            OptionC = "Recrutement, Formation, √âvaluation"
            CorrectAnswer = "B"
            Category = "Etapes"
            Points = 15
            QuizType = "Introduction"
        },
        @{
            Title = "Question 7 - B√©n√©fices"
            Question = "Le principal b√©n√©fice de la d√©marche comp√©tence est :"
            OptionA = "R√©duction des co√ªts de formation"
            OptionB = "Am√©lioration continue des performances individuelles et organisationnelles"
            OptionC = "Simplification des processus RH"
            CorrectAnswer = "B"
            Category = "Definition"
            Points = 15
            QuizType = "Introduction"
        }
    )
    
    try {
        Write-Host "  - Ajout des questions par d√©faut..."
        foreach ($question in $defaultQuestions) {
            try {
                Add-PnPListItem -List "CompetenceQuestions" -Values $question
                Write-Host "    ‚úÖ Question ajout√©e: $($question.Title)" -ForegroundColor Green
            } catch {
                Write-Host "    ‚ö†Ô∏è Question d√©j√† existante ou erreur: $($question.Title)" -ForegroundColor Yellow
            }
        }
        
        Write-Host "‚úÖ Donn√©es de test charg√©es" -ForegroundColor Green
    } catch {
        Write-Warning "‚ö†Ô∏è Erreur lors du chargement des donn√©es de test: $_"
    }
}

# R√©capitulatif final
Write-Host ""
Write-Host "============================================================================" -ForegroundColor Cyan
Write-Host "‚úÖ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS" -ForegroundColor Green
Write-Host "============================================================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìç Site: $SiteUrl" -ForegroundColor White
Write-Host "üì¶ Package: $PackageName" -ForegroundColor White
Write-Host "üìã Listes cr√©√©es: $($createdLists -join ', ')" -ForegroundColor White

if ($LoadTestData) {
    Write-Host "üß™ Donn√©es de test: Charg√©es" -ForegroundColor White
}

Write-Host ""
Write-Host "üåê Acc√©dez √† votre site SharePoint pour utiliser la solution" -ForegroundColor Yellow
Write-Host ""
Write-Host "üìö Documentation et support:" -ForegroundColor Cyan
Write-Host "   - Ajoutez le WebPart √† une page SharePoint" -ForegroundColor Gray
Write-Host "   - Les listes sont disponibles dans 'Contenu du site'" -ForegroundColor Gray
Write-Host "   - Les permissions sont g√©r√©es automatiquement" -ForegroundColor Gray
Write-Host ""

# Script de d√©sinstallation (comment√©)
<#
# Pour d√©sinstaller la solution, utilisez ces commandes:
Write-Host "Pour d√©sinstaller la solution:" -ForegroundColor Red
Write-Host "Uninstall-PnPApp -Identity '$SolutionName'" -ForegroundColor Red
Write-Host "Remove-PnPApp -Identity '$SolutionName'" -ForegroundColor Red
#>

Write-Host "D√©ploiement termin√© √† $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Gray
